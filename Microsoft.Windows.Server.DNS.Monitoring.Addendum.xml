<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Microsoft.Windows.Server.DNS.Monitoring.Addendum</ID>
      <Version>1.0.5.8</Version>
    </Identity>
    <Name>Microsoft Windows Server 2016 DNS Monitoring Addendum</Name>
    <References>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSIGL">
        <ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWD2">
        <ID>Microsoft.Windows.DNSServer.2016</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWSA6D">
        <ID>Microsoft.Windows.Server.AD.2016.Discovery</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWSA6M">
        <ID>Microsoft.Windows.Server.AD.2016.Monitoring</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="Windows.DNS.Root.Domain.Controllers.Group" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="Windows.DNS.Server.IP.Address.Root.Domain.Controllers.Group" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="Windows.DNS.Forwarder.Conditional.Forward.Root.Domain.Controllers.Group" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="Windows.DNS.Zone.Root.Domain.Controllers.Group" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="Windows.DNS.Seed" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false">
          <Property ID="DisplayName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="15" MinLength="4" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="Windows.DNS.Seed.Scavenging.Class" Accessibility="Public" Abstract="false" Base="Windows.DNS.Seed" Hosted="true" Singleton="false" Extension="false" />
      </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="Proactive.DailyTasks.DNSAlerts.Close.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>06:01</Start>
                        <End>06:25</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Proactive.DailyTasks.DNSAlerts.Close.Script.Datasource.v1058.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DNS alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DNSAlerts.Close.Script.Datasource.v1058.ps1"
$EventID = "546"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
$Age = [DateTime](Get-Date).AddDays(-1)

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}
	
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather DNS Alerts for date ($date).")

# Gather WINOS alerts
## Grab the MP, get the Monitors and Rules from the MP, then grab all alerts found inside the Monitors/Rules
$SCOMCoreMP = Get-SCOMManagementPack -DisplayName "Microsoft Windows Server 2016 and 1709+ DNS Monitoring"
$SCOMCoreRules = $SCOMCoreMP.GetRules()
$SCOMCoreMonitors = $SCOMCoreMP.GetMonitors()

$SCOMCoreReportAlerts = Get-SCOMAlert -ResolutionState (0..254) | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
$SCOMCoreReportAlerts.Count

$SCOMOpenReportAlerts = $SCOMCoreReportAlerts
$SCOMOpenReportAlerts.Count

$SCOMCoreRuleAlerts = $SCOMCoreReportAlerts | ? { ( $_.Name -in $SCOMCoreRules.DisplayName) }
$SCOMCoreRuleAlerts.Count

$SCOMCoreMonitorAlerts = $SCOMCoreReportAlerts | ? { ($_.Name -in $SCOMCoreMonitors.DisplayName ) }
$SCOMCoreMonitorAlerts.Count

$AutoClosed = $SCOMCoreMonitorAlerts.Count + $SCOMCoreRuleAlerts.Count
$Test = $SCOMCoreReportAlerts.Count

# Open/Closed breakout
$OpenDNSAlerts = $SCOMCoreReportAlerts
$OpenDNSAlerts.Count
$ClosedDNSAlerts = Get-SCOMAlert -ResolutionState 255 | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
$ClosedDNSAlerts.Count


#
# Build report
if ($SCOMOpenReportAlerts.Count -eq 0 )
	{
	$Message = "ZERO DNS 2016+ alerts for ($date)"
	$DNSAMessage = "ZERO DNS 2016+ alerts for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
$DNSAMessage= @()

if ($SCOMOpenReportAlerts.Count -gt 0 )
	{
	$DNSAMessage += ""
	$DNSAMessage += "Alert Count = $($SCOMOpenReportAlerts.Count)"
	$DNSAMessage += ""
	$DNSAMessage += "# DNS Monitors auto-closed"
	$DNSAMessage += "#=========================================================="
	$DNSAMessage += "# Number of historical DNS alerts = $($SCOMCoreReportAlerts.Count)"
	$DNSAMessage += "# Number of OPEN DNS alert monitors AND rules = $($SCOMOpenReportAlerts.Count)"
	$DNSAMessage += "#=========================================================="
	$DNSAMessage += ""
	$DNSAMessage += "#==============================================="
	$DNSAMessage += "# Monitors AND Rules that were auto closed = $($AutoClosed)"
	$DNSAMessage += "#==============================================="
	$DNSAMessage += ""
	#$DNSAMessage += "#================================================"
	#$DNSAMessage += "# List of included Monitor/Rule names auto-closed"
	#$DNSAMessage += "#================================================"
	#$DNSAMessage += "# Monitors"
	#$DNSAMessage += $DNSMonitorsToAutoClose | out-string
	#$DNSAMessage += "# Rules"
	#$DNSAMessage += $DNSRulesToAutoClose | out-string
	#$DNSAMessage += "#============================================================"
	#$DNSAMessage += ""
	}

$DNSAMessage

$DNSAMessage = $DNSAMessage | out-string

#============================================================

  $Result = "GOOD"
  $Message = "DNS Monitors auto-closed for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Monitors auto-closed for ($date). `n `n$DNSAMessage")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DNSAMessage)

# Return all bags
$bag


# Rule closure logic
#=================================================================================
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks DNS rule reset started for ($date)")

$SCOMCoreRulesToClear = $SCOMCoreRuleAlerts | where { ( $_.TimeAdded -lt $Age ) }
# Convert Age back to days for alert properties logging
$Days = ((Get-date) - $Age).Days
if ( $SCOMCoreRulesToClear.Count -gt 0 )
	{
	$SCOMCoreRulesToClear | Resolve-SCOMAlert -Comment "Closing $Days day old alerts after report alert generated - DNS Addendum Automation DS"
	}

# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks DNS rule reset completed for ($date)")


#=================================================================================
# Reset Monitors Script base code modified
# Put ps1 in mgmtpacks folder
# https://sc.scomurr.com/scom-2012-monitor-reset-cleaning-up-the-environment/
#	Download
# https://gallery.technet.microsoft.com/SCOM-2012-Batch-reset-63a17534
	
#Alternate
#https://gallery.technet.microsoft.com/scriptcenter/Auto-reset-script-for-d8b775ca

# Changed up logic to sort unique classes in mgmnt pack families.
# Added Age variable for monitors thanks to Aris Somatis - $Age specified in top level variables
# Cycling through monitors made reset loop huge ~650 monitors when only ~50 classes
# New logic reduced runtime from 8 minutes to roughly 8 seconds
#=================================================================================

# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks DNS Monitors reset started for ($date).")

if ( $SCOMCoreReportAlerts.Count -gt 0 )
	{
	# Get classes - Examples - Microsoft.Windows.Server.AD.2016.Discovery, Microsoft.Windows.Server.AD.Library
		#$Library = Get-SCOMManagementPack -name "Microsoft.Windows.Server.AD.Class.Library"
		$Monitoring = $SCOMCoreMP
		#$Discovery = Get-SCOMManagementPack -name Microsoft.Windows.Server.AD.2016.Discovery

	# DNS pack naming
	$DNSClasses = @(Get-SCOMClass -ManagementPack $Monitoring; )
	$DNSClass = $DNSClasses | sort -property Name -uniq
	# Debug
	$DNSClass.Count

	# Set up monitor objects to reset
	foreach ($Class in $DNSClass)
		{
		$ActiveMonitors = @(Get-SCOMClassInstance -Class $Class | ? { ($_.healthstate -ne 'Success') -AND ( $_.healthstate -ne 'Uninitialized') -AND ($_.IsAvailable -eq $true) } )
		# Debug
		$ActiveMonitors.Count
		# $ActiveMonitors | fl -property *
		write-host "Found" $ActiveMonitors.Count "unhealthy monitors for class" $Class
		foreach ( $UnhealthyOLDMonitor in $ActiveMonitors )
			{
			#if ( $UnhealthyOLDMonitor.AvailabilityLastModified -lt $Age )
			if ( $UnhealthyOLDMonitor.StateLastModified -lt $Age )
				{
				#$UnhealthyMonitors += $ActiveMonitors.Count
				#UnhealthyOLDMonitor | select AvailabilityLastModified,Path,DisplayName
				#$UnhealthyOLDMonitor.Count
				#write-host "Found" + $UnhealthyOLDMonitor.Count + "unhealthy monitor beyond" $Age "days."
				#write-host ""
				if ( $ActiveMonitors.Count -gt 0)
					{
					foreach ( $ActiveMonitor in $UnhealthyOLDMonitor )
						{
						# Debug
						$ActiveMonitor.ID
						write-host " Resetting Health State on '" + $ActiveMonitor.FullName + "'" 
						write-host ""
						$ActiveMonitor.ResetMonitoringState($ActiveMonitor.Id)
						}
					}
				}
			}
		}
	# Debug
	#$MonitorClass | fl -property *
	#$MonitorClass | select DisplayName,ID
	}

# Debug Write event for rule closure
#=================================================================================
# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks DNS monitor reset completed for ($date)")

#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Close Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>06:09</Start>
                        <End>06:19</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.DataSource.v1058.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DNS alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.DataSource.v1058.ps1"
$EventID = "548"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather DNS Alerts for date ($date).")


# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$DNSAlerts = get-scomalert -name "Windows DNS*" -ResolutionState (0..254) | ? { $_.TimeRaised -gt $Time }
$DNSAlerts.Count

$Zone = @()
$Unused = @()
$UnusedZones = get-scomalert -name "Windows DNS 2016 and 1709+ - Detect Unused Zone" -ResolutionState (0..254)| ? { $_.TimeRaised -gt $Time }
$UnusedZoneAlerts = get-scomalert -name "Windows DNS 2016 and 1709+ - Detect Unused Zone" -ResolutionState (0..254)
$Alerts = $UnusedZones.MonitoringObjectDisplayName


foreach ($LLine in $Alerts)
	{
		$Lmatch = $LLine |select-string -pattern " "
		if ($Lmatch)
			{
			$Lmatch
			}
 	}

foreach ( $file in $Zone )
	{
	$file
	$Unused += $file
	$Unused += $($UnusedZoneAlerts | ? { $_.MonitoringObjectDisplayName -like "*$file*" } | ft NetbiosComputerName,TimeRaised -auto -wrap)
	}

$Unused


$DNSMessage = @()

if ( $DNSAlerts.Count -eq 0 )
	{
	$DNSMessage += "ZERO DNS alerts for date ($date)."
	}

if ( $DNSAlerts.Count -gt 0 )
	{
	$DNSMessage += ""
	
	# Show DNS alerts by Time Raised,NetBiosComputerName,Message
	#
	$DNSMessage += "DNS Alerts for $($date)"
	$DNSMessage += ""
	$DNSMessage += "Count of DNS alerts"
	$DNSMessage += $DNSAlerts.Count
	$DNSMessage += ""
	$DNSMessage += "#========================================================"
	$DNSMessage += ""
	$DNSMessage += "# DNS Alerts sorted by TimeRaised, then Domain Controller"
	$DNSMessage += "#==================================="
	$DNSMessage += ""

	$DNS4015 = $DNSAlerts | ? { $_.Description -like "Event ID: 4015*" } |sort -property NetBiosComputerName 

	if ( $DNS4015.Count -gt 0 )
		{
		$DNSMessage += "# DNS 4015 alerts for impacting DNS issue"
		$DNSMessage += "#========================================================"
		$DNSMessage += ""
		$DNSMessage += "# Event 4015 affected servers:"
		$DNSMessage += "#========================"
		if ( $DNSFailed.Count -lt 10 )
			{
			$DNSMessage += ($DNS4015 | ft NetbiosComputerName,TimeRaised -auto -wrap)
			$DNSMessage += ""
			}
		if ( $DNSFailed.Count -ge 10 )
			{
			$DNSMessage += "The number of nslookup synthetics exceeds 10 since the last report execution"
			}
		$DNSMessage += "#========================"
		$DNSMessage += ""
		}

	$DNSLCLFailed = $DNSAlerts | ? { $_.Name -eq "Windows DNS - NSLookup Failed Against a Local Address" }

if ( $DNSLCLFailed.Count -gt 0 )
	{
	$DNSMessage += "# nslookup failed against a local address:"
	$DNSMessage += "#==================="
	$DNSMessage += ($DNSLCLFailed| ft NetbiosComputerName,TimeRaised -auto -wrap )
	$DNSMessage += ""
	}

	$DNSFailed = $DNSAlerts | ? { $_.Name -like "Windows DNS - NSLookup Failed for Zone*" }

	if ( $DNSFailed.Count -gt 0 )
		{
		$DNSMessage += "# nslookup failures by zone:"
		$DNSMessage += "#==================="
		if ( $DNSFailed.Count -lt 10 )
			{
			$DNSMessage += ($DNSFailed| sort -property TimeRaised -uniq | ft TimeRaised,MonitoringObjectDisplayName -auto -wrap )
			$DNSMessage += ""
			}
		if ( $DNSFailed.Count -ge 10 )
			{
			$DNSMessage += "The number of nslookup 'failures by zone' exceeds 10 since the last report execution"
			}
		$DNSMessage += "#==================="
		$DNSMessage += ""
		}

	$DNSForwardFail = $DNSAlerts | ? { $_.Name -like "Windows DNS - Conditional Forward Forwarder - All IP Addresses Failing*" }

	if ( $DNSForwardFail.Count -gt 0 )
		{
		$DNSMessage += "# DNS synthetic conditional forward forwarder failing"
		$DNSMessage += "#==================="
		$DNSMessage += ""
		$DNSMessage += "# Alert Count"
		$DNSMessage += $DNSForwardFail.Count
		$DNSMessage += ""
		$DNSMessage += "# Alert description"
		$DNSMessage += "#==================="
		if ( $DNSForwardFail.Count -lt 10 )
			{
			$DNSMessage += ($DNSForwardFail| sort -property MonitoringObjectName -uniq | ft TimeRaised,MonitoringObjectDisplayName -auto -wrap )
			$DNSMessage += ""
			}
		if ( $DNSForwardFail.Count -ge 10 )
			{
			$DNSMessage += "The number of nslookup synthetics exceeds 10 since the last report execution"
			$DNSMessage += ""
			}
		$DNSMessage += "#==================="
		$DNSMessage += ""
		}

	$DNSOverload = $DNSAlerts | ? { ($_.Name -eq "Windows DNS 2016 and 1709+ - Server Query Overload" ) -OR ( $_.Name -eq "Windows DNS 2016 and 1709+ - Zone Query Overload" ) }

	if ( $DNSOverload.Count -gt 0 )
		{
		$DNSMessage += "# DNS Query overloads - over 180k DNS requests in 10 minutes)"
		$DNSMessage += "#==================="
		if ( $DNSOverload.Count -ge 10 )
			{
			$DNSMessage += "The number of used DNS Query Overload alerts exceeds 10 since the last report execution"
			$DNSMessage += ""
			}
		if ( $DNSOverload.Count -lt 10 )
			{
			$DNSMessage += ($DNSOverload | ft NetBiosComputerName,TimeRaised,Description -auto -wrap )
			$DNSMessage += ""
			}	
		$DNSMessage += "#==================="
		$DNSMessage += ""
		}

	if ( $Unused.Count -gt 0 )
		{
		$DNSMessage += "# Unused DNS Zones"
		$DNSMessage += "#========================================================"
		if ( $Unused.Count -ge 10 )
			{
			$DNSMessage += "The number of used DNS Zones alerts exceeds 10 since the last report execution"
			$DNSMessage += ""
			}
		if ( $Unused.Count -lt 10 )
			{
			$DNSMessage += $Unused
			$DNSMessage += ""
			}
		$DNSMessage += ""
		$DNSMessage += "#========================================================"
		$DNSMessage += ""
		}

	# Remaining DNS alerts

	$Remaining = $DNSAlerts | ? { $_.TimeRaised -gt $Time }  | ? { !( ( $_.Description -like "Event ID: 4015*" ) `
		-OR ( $_.Name -eq "Windows DNS - NSLookup Failed Against a Local Address" ) `
		-OR ( $_.Name -eq "Windows DNS - NSLookup Failed for Zone's NS Record" ) `
		-OR ( $_.Name -eq "Windows DNS - Conditional Forward Forwarder - All IP Addresses Failing*" ) `
		-OR ( $_.Name -like "Windows DNS 2016 and 1709+ - * Query Overload" ) `
		-OR ( $_.Name -eq "Windows DNS 2016 and 1709+ - Detect Unused Zone" ) `
		-OR ( $_.Name -eq "Windows DNS - Conditional Forward Forwarder - All IP Addresses Failing NSLookup" ) `
		-OR ( $_.Name -like "Windows DNS - NSLookup Failed for Zone*" ) ) }

	if ( $Remaining.Count -gt 0 )
		{
		$DNSMessage += "# Remaining DNS alerts"
		$DNSMessage += "#========================================================"
		if ( $Remaining.Count -ge 10 )
			{
			$DNSMessage += "The number of remaining DNS alerts exceeds 10 since the last report execution"
			$DNSMessage += ""
			}
		if ( $Remaining.Count -lt 10 )
			{
			$DNSMessage += ($Remaining | sort -property Name | ft TimeRaised,NetbiosComputerName,Name -auto -wrap)
			$DNSMessage += ""
			}
		$DNSMessage += ""
		$DNSMessage += "#========================================================"
		$DNSMessage += ""
		}

	$DNSMessage += ""
	$DNSMessage += "DNS Alert names:"
	$DNSMessage += "#==================="
	$DNSMessage += ($DNSAlerts | sort -uniq | ft Name -auto -wrap)
	$DNSMessage += ""
	}

$DNSMessage

$DNSMessage = $DNSMessage | out-string

#============================================================


  $Result = "GOOD"
  $Message = "Daily DNS alerts report for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Summary Report completed for ($date). `n `n$DNSMessage")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DNSMessage)


# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Report Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.DNSAlerts.Synthetic.Monitor.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval>14400</Interval>
                    <SpreadInitializationOverInterval>300</SpreadInitializationOverInterval>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Proactive.DNSAlerts.Synthetic.Monitor.Datasource.v1058.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Proactive DNS Synthetic internal/external PowerShell script
#
#  Author:  Kevin Justin
#  v1.0
#=================================================================================
# param([string]$DriveLetter #,[string]$ComputerName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $ComputerName = "computername.domain.com"
$ComputerName = $env:ComputerName

$ExternalDNS = "google.com"
$InternalDNS = "ds.army.mil"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
$ScriptName = "Proactive.DNSAlerts.Synthetic.Monitor.Datasource.v1058.ps1"
$EventID = "548"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag()

#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Synthetic Script is starting. `n Running as ($whoami).")
#=================================================================================


# Begin MAIN script section
#=================================================================================
#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather Proactive DNS Alerts Synthetic monitor check for date ($date).")

$DSMessage = "Proactive DNS Alerts Synthetic monitor for date ($date)."

$DNSSyntheticOutput = @()

# Simple synthetic check
if ( -NOT ( Resolve-DnsName $InternalDNS -Server $_ -DnsOnly) )
	{
	Write-Host "Fail" -ForegroundColor Red
	$iDNS = "Fail"
	$DNSSyntheticOutput += "Internal DNS check $($InternalDNS) failed on $ComputerName"
	}


# Test external DNS
write-host "Testing External DNS" -ForegroundColor Yellow

# External DNS
if ( -NOT ( Resolve-DnsName $ExternalDNS -Server $_ -DnsOnly) )
	{
	Write-Host "Failed" -ForegroundColor Red
	$eDNS = "Fail"
	$DNSSyntheticOutput += "External DNS check $($ExternalDNS) failed on $ComputerName"
	}


if ( ( $iDNS -eq "Fail" ) -OR ( $eDNS -eq "Fail" ) )
	{
	$strCondition = "Bad"
	}


# Check for success
if ( ( $iDNS -eq $Null ) -AND ( $eDNS -eq $Null ) )
	{
	$strCondition = "Good"
	}


#Check the value of $strCondition
IF ( $strCondition -eq "Good" )
	{
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"NO SME/SystemOwner/SysAdmin/Server action required")
	$bag.AddValue('Result',$strCondition)
	}

IF ( $strCondition -eq "Bad" )
	{
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$DNSSyntheticOutput")
	$bag.AddValue('Result',$strCondition)
	$bag.AddValue('Summary',$DNSSyntheticOutput)
	}

# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Synthetic Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>06:11</Start>
                        <End>06:21</End>
                        <DaysOfWeekMask>2</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.DataSource.v1058.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DNS Scavenging alerts report
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.DataSource.v1058.ps1"
$EventID = "548"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather DNS Scavenging Alerts for date ($date).")


# Grab past week
$Time = [DateTime](Get-Date).AddDays(-7)


$DNSAlerts = get-scomalert -name "*Scavenging*" | where { $_.TimeRaised -gt $Time }
$DNSAlerts.Count


$DNSMessage = @()

if ( $DNSAlerts.Count -eq 0 )
	{
	$DNSMessage += "ZERO DNS Scavenging alerts for the past week ($date)."
	}

if ( $DNSAlerts.Count -gt 0 )
	{
	$DNSMessage += ""
	
	# Show DNS alerts by Time Raised,NetBiosComputerName,Message
	#
	$DNSMessage += "# DNS Scavenging Alerts for $($date)"
	$DNSMessage += ""
	$DNSMessage += "# Count of DNS Scavenging alerts = $($DNSAlerts.Count)"
	$DNSMessage += "#========================================================"
	$DNSMessage += ""

	if ( $($DNSAlerts | where { $_.Name -like "*2501*" } ).Count -gt 0 )
		{
		$DNSMessage += "DNS Scavenging Alert Event 2501 Details"
		$DNSMessage += "#========================================================"
		$DNSMessage +=  $DNSAlerts | where { $_.Name -like "*2501*" } | format-table NetbiosComputerName,TimeRaised,Parameters -auto -wrap
		$DNSMessage += "#========================================================"
		}

	if ( $($DNSAlerts | where { $_.Name -like "*2502*" } ).Count -gt 0 )
		{
		$DNSMessage += ""
		$DNSMessage += "DNS Scavenging Alert Event 2502 Details"
		$DNSMessage += "#========================================================"
		$DNSMessage +=  $DNSAlerts | where { $_.Name -like "*2502*" } | format-table NetbiosComputerName,TimeRaised,Parameters -auto -wrap
		$DNSMessage += "#========================================================"
		}

	if ( $($DNSAlerts | where { $_.Name -like "Proactive DailyTasks DNSAlerts Scavenging Summary*" } ).Count -gt 0 )
		{
		$DNSMessage += ""
		$DNSMessage += "# Weekly Reports alerts run in past week"
		$DNSMessage += "#========================================================"
		$DNSMessage += $DNSAlerts | where { $_.Name -like "Proactive DailyTasks DNSAlerts Scavenging Summary*" } | format-table TimeRaised -auto -wrap
		$DNSMessage += "#========================================================"
		}
		
	if ( $($DNSAlerts | where { ( $_.Name -notlike "*2501*" ) -AND ( $_.Name -notlike "*2502*" ) `
		-AND ( $_.Name -notlike "Proactive DailyTasks DNSAlerts Scavenging Summary*" ) } ).Count -gt 0 )
		{
		$DNSMessage += ""
		$DNSMessage += "# Remaining alerts"
		$DNSMessage += "#========================================================"
		$DNSMessage += $DNSAlerts | where { ( $_.Name -notlike "*2501*" ) -AND ( $_.Name -notlike "*2502*" ) `
		-AND ( $_.Name -notlike "Proactive DailyTasks DNSAlerts Scavenging Summary*" )  -AND ( $_.Name -notlike "*Proactive DNSAlerts Scavenging Close Task Alert*" )  } `
		| format-table TimeRaised,Name
		$DNSMessage += "#========================================================"
		}
	$DNSMessage += ""
	}

$DNSMessage

$DNSMessage = $DNSMessage | out-string

#============================================================


$Result = "GOOD"
$Message = "DNS Scavenging alerts report for ($date)"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Scavenging Summary Report completed for ($date). `n `n$DNSMessage")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DNSMessage)


# Return all bags
$bag

#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Scavenging Report Script Completed.  Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>06:11</Start>
                        <End>06:21</End>
                        <DaysOfWeekMask>2</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.DataSource.v1058.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DNS Scavenging close report
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.DataSource.v1058.ps1"
$EventID = "548"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting.  Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather DNS Scavenging Close task for date ($date).")


# Grab past week
$Time = [DateTime](Get-Date).AddDays(-7)


$DNSAlerts = get-scomalert -name "*Scavenging*" -ResolutionState (0..254) | where { $_.TimeRaised -gt $Time }
#$DNSAlerts.Count

# Gather WINOS alerts
## Grab the MP, get the Monitors and Rules from the MP, then grab all alerts found inside the Monitors/Rules
$SCOMCoreMP = Get-SCOMManagementPack -DisplayName "Microsoft Windows Server 2016 DNS Monitoring Addendum"
$SCOMCoreRules = $SCOMCoreMP.GetRules()
$SCOMCoreMonitors = $SCOMCoreMP.GetMonitors()

$SCOMCoreReportAlerts = Get-SCOMAlert -ResolutionState (0..254) | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
#$SCOMCoreReportAlerts.Count

$SCOMOpenReportAlerts = $SCOMCoreReportAlerts
#$SCOMOpenReportAlerts.Count

$SCOMCoreRuleAlerts = $SCOMCoreReportAlerts | ? { ( $_.Name -in $SCOMCoreRules.DisplayName) }
#$SCOMCoreRuleAlerts.Count

$SCOMCoreMonitorAlerts = $SCOMCoreReportAlerts | ? { ($_.Name -in $SCOMCoreMonitors.DisplayName ) }
#$SCOMCoreMonitorAlerts.Count

$AutoClosed = $SCOMCoreMonitorAlerts.Count + $SCOMCoreRuleAlerts.Count
$Test = $SCOMCoreReportAlerts.Count

# Open/Closed breakout
$OpenDNSAlerts = $SCOMCoreReportAlerts
#$OpenDNSAlerts.Count
$ClosedDNSAlerts = Get-SCOMAlert -ResolutionState 255 | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
#$ClosedDNSAlerts.Count


$DNSMessage= @()

#
# Build report
if ($SCOMOpenReportAlerts.Count -eq 0 )
	{
	#$Message = "ZERO DNS 2016+ alerts for ($date)"
	$DNSMessage = "ZERO DNS Scavenging alerts for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}

if ($SCOMOpenReportAlerts.Count -gt 0 )
	{
	$DNSMessage += ""
	$DNSMessage += "Alert Count = $($SCOMOpenReportAlerts.Count)"
	$DNSMessage += ""
	$DNSMessage += "# DNS Monitors auto-closed"
	$DNSMessage += "#=========================================================="
	$DNSMessage += "# Number of historical DNS alerts = $($SCOMCoreReportAlerts.Count)"
	$DNSMessage += "# Number of OPEN DNS alert monitors AND rules = $($SCOMOpenReportAlerts.Count)"
	$DNSMessage += "#=========================================================="
	$DNSMessage += ""
	$DNSMessage += "#==============================================="
	$DNSMessage += "# Monitors AND Rules that were auto closed = $($AutoClosed)"
	$DNSMessage += "#==============================================="
	$DNSMessage += ""
	#$DNSMessage += "#================================================"
	#$DNSMessage += "# List of included Monitor/Rule names auto-closed"
	#$DNSMessage += "#================================================"
	#$DNSMessage += "# Monitors"
	#$DNSMessage += $DNSMonitorsToAutoClose | out-string
	#$DNSMessage += "# Rules"
	#$DNSMessage += $DNSRulesToAutoClose | out-string
	#$DNSMessage += "#============================================================"
	#$DNSMessage += ""
	}

$DNSMessage

$DNSMessage = $DNSMessage | out-string

#============================================================


  $Result = "GOOD"
  $Message = "DNS Scavenging alerts close for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message `n `n$DNSMessage")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DNSMessage)


# Return all bags
$bag

$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Scavenging rule close completed for ($date).")

#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Close Script Completed.  Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>

      <WriteActionModuleType ID="Proactive.DailyTasks.DNSAlerts.Close.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DailyTasks.DNSAlerts.Close.Script.Alert.WA.v1058.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DNS alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DNSAlerts.Close.Script.Datasource.v1058.ps1"
$EventID = "547"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
$Age = [DateTime](Get-Date).AddDays(-1)

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}
	
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather DNS Alerts for date ($date).")

# Gather WINOS alerts
## Grab the MP, get the Monitors and Rules from the MP, then grab all alerts found inside the Monitors/Rules
$SCOMCoreMP = Get-SCOMManagementPack -DisplayName "Microsoft Windows Server 2016 and 1709+ DNS Monitoring"
$SCOMCoreRules = $SCOMCoreMP.GetRules()
$SCOMCoreMonitors = $SCOMCoreMP.GetMonitors()

$SCOMCoreReportAlerts = Get-SCOMAlert -ResolutionState (0..254) | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
$SCOMCoreReportAlerts.Count

$SCOMOpenReportAlerts = $SCOMCoreReportAlerts
$SCOMOpenReportAlerts.Count

$SCOMCoreRuleAlerts = $SCOMCoreReportAlerts | ? { ( $_.Name -in $SCOMCoreRules.DisplayName) }
$SCOMCoreRuleAlerts.Count

$SCOMCoreMonitorAlerts = $SCOMCoreReportAlerts | ? { ($_.Name -in $SCOMCoreMonitors.DisplayName ) }
$SCOMCoreMonitorAlerts.Count

$AutoClosed = $SCOMCoreMonitorAlerts.Count + $SCOMCoreRuleAlerts.Count
$Test = $SCOMCoreReportAlerts.Count

# Open/Closed breakout
$OpenDNSAlerts = $SCOMCoreReportAlerts
$OpenDNSAlerts.Count
$ClosedDNSAlerts = Get-SCOMAlert -ResolutionState 255 | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
$ClosedDNSAlerts.Count


$DNSMessage= @()

#
# Build report
if ($SCOMOpenReportAlerts.Count -eq 0 )
	{
	$Message = "ZERO DNS 2016+ alerts for ($date)"
	$DNSMessage = "ZERO DNS 2016+ alerts for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}

if ($SCOMOpenReportAlerts.Count -gt 0 )
	{
	$DNSMessage += ""
	$DNSMessage += "Alert Count = $($SCOMOpenReportAlerts.Count)"
	$DNSMessage += ""
	$DNSMessage += "# DNS Monitors auto-closed"
	$DNSMessage += "#=========================================================="
	$DNSMessage += "# Number of historical DNS alerts = $($SCOMCoreReportAlerts.Count)"
	$DNSMessage += "# Number of OPEN DNS alert monitors AND rules = $($SCOMOpenReportAlerts.Count)"
	$DNSMessage += "#=========================================================="
	$DNSMessage += ""
	$DNSMessage += "#==============================================="
	$DNSMessage += "# Monitors AND Rules that were auto closed = $($AutoClosed)"
	$DNSMessage += "#==============================================="
	$DNSMessage += ""
	#$DNSMessage += "#================================================"
	#$DNSMessage += "# List of included Monitor/Rule names auto-closed"
	#$DNSMessage += "#================================================"
	#$DNSMessage += "# Monitors"
	#$DNSMessage += $DNSMonitorsToAutoClose | out-string
	#$DNSMessage += "# Rules"
	#$DNSMessage += $DNSRulesToAutoClose | out-string
	#$DNSMessage += "#============================================================"
	#$DNSMessage += ""
	}

$DNSMessage

$DNSMessage = $DNSMessage | out-string

#============================================================

  $Result = "GOOD"
  $Message = "DNS Monitors auto-closed for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Monitors auto-closed for ($date). `n `n$DNSMessage")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DNSMessage)

# Return all bags
$bag


# Rule closure logic
#=================================================================================
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks DNS rule reset started for ($date)")

$SCOMCoreRulesToClear = $SCOMCoreRuleAlerts | where { ( $_.TimeAdded -lt $Age ) }
# Convert Age back to days for alert properties logging
$Days = ((Get-date) - $Age).Days
if ( $SCOMCoreRulesToClear.Count -gt 0 )
	{
	$SCOMCoreRulesToClear | Resolve-SCOMAlert -Comment "Closing $Days day old alerts after report alert generated - DNS Addendum Automation DS"
	}

# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks DNS rule reset completed for ($date)")


#=================================================================================
# Reset Monitors Script base code modified
# Put ps1 in mgmtpacks folder
# https://sc.scomurr.com/scom-2012-monitor-reset-cleaning-up-the-environment/
#	Download
# https://gallery.technet.microsoft.com/SCOM-2012-Batch-reset-63a17534
	
#Alternate
#https://gallery.technet.microsoft.com/scriptcenter/Auto-reset-script-for-d8b775ca

# Changed up logic to sort unique classes in mgmnt pack families.
# Added Age variable for monitors thanks to Aris Somatis - $Age specified in top level variables
# Cycling through monitors made reset loop huge ~650 monitors when only ~50 classes
# New logic reduced runtime from 8 minutes to roughly 8 seconds
#=================================================================================

# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks DNS Monitors reset started for ($date).")

if ( $SCOMCoreReportAlerts.Count -gt 0 )
	{
	# Get classes - Examples - Microsoft.Windows.Server.AD.2016.Discovery, Microsoft.Windows.Server.AD.Library
		#$Library = Get-SCOMManagementPack -name "Microsoft.Windows.Server.AD.Class.Library"
		$Monitoring = $SCOMCoreMP
		#$Discovery = Get-SCOMManagementPack -name Microsoft.Windows.Server.AD.2016.Discovery

	# DNS pack naming
	$DNSClasses = @(Get-SCOMClass -ManagementPack $Monitoring; )
	$DNSClass = $DNSClasses | sort -property Name -uniq
	# Debug
	$DNSClass.Count

	# Set up monitor objects to reset
	foreach ($Class in $DNSClass)
		{
		$ActiveMonitors = @(Get-SCOMClassInstance -Class $Class | ? { ($_.healthstate -ne 'Success') -AND ( $_.healthstate -ne 'Uninitialized') -AND ($_.IsAvailable -eq $true) } )
		# Debug
		$ActiveMonitors.Count
		# $ActiveMonitors | fl -property *
		write-host "Found" $ActiveMonitors.Count "unhealthy monitors for class" $Class
		foreach ( $UnhealthyOLDMonitor in $ActiveMonitors )
			{
			#if ( $UnhealthyOLDMonitor.AvailabilityLastModified -lt $Age )
			if ( $UnhealthyOLDMonitor.StateLastModified -lt $Age )
				{
				#$UnhealthyMonitors += $ActiveMonitors.Count
				#UnhealthyOLDMonitor | select AvailabilityLastModified,Path,DisplayName
				#$UnhealthyOLDMonitor.Count
				#write-host "Found" + $UnhealthyOLDMonitor.Count + "unhealthy monitor beyond" $Age "days."
				#write-host ""
				if ( $ActiveMonitors.Count -gt 0)
					{
					foreach ( $ActiveMonitor in $UnhealthyOLDMonitor )
						{
						# Debug
						$ActiveMonitor.ID
						write-host " Resetting Health State on '" + $ActiveMonitor.FullName + "'" 
						write-host ""
						$ActiveMonitor.ResetMonitoringState($ActiveMonitor.Id)
						}
					}
				}
			}
		}
	# Debug
	#$MonitorClass | fl -property *
	#$MonitorClass | select DisplayName,ID
	}

# Debug Write event for rule closure
#=================================================================================
# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks DNS monitor reset completed for ($date)")

#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Close Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.WA.v1058.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DNS alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.WA.v1058.ps1"
$EventID = "549"
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather DNS Alerts for date ($date).")


# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$DNSAlerts = get-scomalert -name "Windows DNS*" -ResolutionState (0..254) | ? { $_.TimeRaised -gt $Time }
$DNSAlerts.Count

$Zone = @()
$Unused = @()
$UnusedZones = get-scomalert -name "Windows DNS 2016 and 1709+ - Detect Unused Zone" -ResolutionState (0..254) | ? { $_.TimeRaised -gt $Time }
$UnusedZoneAlerts = get-scomalert -name "Windows DNS 2016 and 1709+ - Detect Unused Zone" -ResolutionState (0..254)
$Alerts = $UnusedZones.MonitoringObjectDisplayName


foreach ($LLine in $Alerts)
	{
		$Lmatch = $LLine |select-string -pattern " "
		if ($Lmatch)
			{
			$Lmatch
			}
 	}

foreach ( $file in $Zone )
	{
	$file
	$Unused += $file
	$Unused += $($UnusedZoneAlerts | ? { $_.MonitoringObjectDisplayName -like "*$file*" } | ft NetbiosComputerName,TimeRaised -auto -wrap)
	}

$Unused


$DNSMessage = @()

if ( $DNSAlerts.Count -eq 0 )
	{
	$DNSMessage += "ZERO DNS alerts for date ($date)."
	}

if ( $DNSAlerts.Count -gt 0 )
	{
	$DNSMessage += ""
	
	# Show DNS alerts by Time Raised,NetBiosComputerName,Message
	#
	$DNSMessage += "DNS Alerts for $($date)"
	$DNSMessage += ""
	$DNSMessage += "Count of DNS alerts"
	$DNSMessage += $DNSAlerts.Count
	$DNSMessage += ""
	$DNSMessage += "#========================================================"
	$DNSMessage += ""
	$DNSMessage += "# DNS Alerts sorted by TimeRaised, then Domain Controller"
	$DNSMessage += "#==================================="
	$DNSMessage += ""

	$DNS4015 = $DNSAlerts | ? { $_.Description -like "Event ID: 4015*" } |sort -property NetBiosComputerName 

	if ( $DNS4015.Count -gt 0 )
		{
		$DNSMessage += "# DNS 4015 alerts for impacting DNS issue"
		$DNSMessage += "#========================================================"
		$DNSMessage += ""
		$DNSMessage += "# Event 4015 affected servers:"
		$DNSMessage += "#========================"
		if ( $DNSFailed.Count -lt 10 )
			{
			$DNSMessage += ($DNS4015 | ft NetbiosComputerName,TimeRaised -auto -wrap)
			$DNSMessage += ""
			}
		if ( $DNSFailed.Count -ge 10 )
			{
			$DNSMessage += "The number of nslookup synthetics exceeds 10 since the last report execution"
			}
		$DNSMessage += "#========================"
		$DNSMessage += ""
		}

	$DNSLCLFailed = $DNSAlerts | ? { $_.Name -eq "Windows DNS - NSLookup Failed Against a Local Address" }

if ( $DNSLCLFailed.Count -gt 0 )
	{
	$DNSMessage += "# nslookup failed against a local address:"
	$DNSMessage += "#==================="
	$DNSMessage += ($DNSLCLFailed| ft NetbiosComputerName,TimeRaised -auto -wrap )
	$DNSMessage += ""
	}

	$DNSFailed = $DNSAlerts | ? { $_.Name -like "Windows DNS - NSLookup Failed for Zone*" }

	if ( $DNSFailed.Count -gt 0 )
		{
		$DNSMessage += "# nslookup failures by zone:"
		$DNSMessage += "#==================="
		if ( $DNSFailed.Count -lt 10 )
			{
			$DNSMessage += ($DNSFailed| sort -property TimeRaised -uniq | ft TimeRaised,MonitoringObjectDisplayName -auto -wrap )
			$DNSMessage += ""
			}
		if ( $DNSFailed.Count -ge 10 )
			{
			$DNSMessage += "The number of nslookup 'failures by zone' exceeds 10 since the last report execution"
			}
		$DNSMessage += "#==================="
		$DNSMessage += ""
		}

	$DNSForwardFail = $DNSAlerts | ? { $_.Name -like "Windows DNS - Conditional Forward Forwarder - All IP Addresses Failing*" }

	if ( $DNSForwardFail.Count -gt 0 )
		{
		$DNSMessage += "# DNS synthetic conditional forward forwarder failing"
		$DNSMessage += "#==================="
		$DNSMessage += ""
		$DNSMessage += "# Alert Count"
		$DNSMessage += $DNSForwardFail.Count
		$DNSMessage += ""
		$DNSMessage += "# Alert description"
		$DNSMessage += "#==================="
		if ( $DNSForwardFail.Count -lt 10 )
			{
			$DNSMessage += ($DNSForwardFail| sort -property MonitoringObjectName -uniq | ft TimeRaised,MonitoringObjectDisplayName -auto -wrap )
			$DNSMessage += ""
			}
		if ( $DNSForwardFail.Count -ge 10 )
			{
			$DNSMessage += "The number of nslookup synthetics exceeds 10 since the last report execution"
			$DNSMessage += ""
			}
		$DNSMessage += "#==================="
		$DNSMessage += ""
		}

	$DNSOverload = $DNSAlerts | ? { ($_.Name -eq "Windows DNS 2016 and 1709+ - Server Query Overload" ) -OR ( $_.Name -eq "Windows DNS 2016 and 1709+ - Zone Query Overload" ) }

	if ( $DNSOverload.Count -gt 0 )
		{
		$DNSMessage += "# DNS Query overloads - over 180k DNS requests in 10 minutes)"
		$DNSMessage += "#==================="
		if ( $DNSOverload.Count -ge 10 )
			{
			$DNSMessage += "The number of used DNS Query Overload alerts exceeds 10 since the last report execution"
			$DNSMessage += ""
			}
		if ( $DNSOverload.Count -lt 10 )
			{
			$DNSMessage += ($DNSOverload | ft NetBiosComputerName,TimeRaised,Description -auto -wrap )
			$DNSMessage += ""
			}	
		$DNSMessage += "#==================="
		$DNSMessage += ""
		}

	if ( $Unused.Count -gt 0 )
		{
		$DNSMessage += "# Unused DNS Zones"
		$DNSMessage += "#========================================================"
		if ( $Unused.Count -ge 10 )
			{
			$DNSMessage += "The number of used DNS Zones alerts exceeds 10 since the last report execution"
			$DNSMessage += ""
			}
		if ( $Unused.Count -lt 10 )
			{
			$DNSMessage += $Unused
			$DNSMessage += ""
			}
		$DNSMessage += ""
		$DNSMessage += "#========================================================"
		$DNSMessage += ""
		}

	# Remaining DNS alerts

	$Remaining = $DNSAlerts | ? { $_.TimeRaised -gt $Time }  | ? { !( ( $_.Description -like "Event ID: 4015*" ) `
		-OR ( $_.Name -eq "Windows DNS - NSLookup Failed Against a Local Address" ) `
		-OR ( $_.Name -eq "Windows DNS - NSLookup Failed for Zone's NS Record" ) `
		-OR ( $_.Name -eq "Windows DNS - Conditional Forward Forwarder - All IP Addresses Failing*" ) `
		-OR ( $_.Name -like "Windows DNS 2016 and 1709+ - * Query Overload" ) `
		-OR ( $_.Name -eq "Windows DNS 2016 and 1709+ - Detect Unused Zone" ) `
		-OR ( $_.Name -eq "Windows DNS - Conditional Forward Forwarder - All IP Addresses Failing NSLookup" ) `
		-OR ( $_.Name -like "Windows DNS - NSLookup Failed for Zone*" ) ) }

	if ( $Remaining.Count -gt 0 )
		{
		$DNSMessage += "# Remaining DNS alerts"
		$DNSMessage += "#========================================================"
		if ( $Remaining.Count -ge 10 )
			{
			$DNSMessage += "The number of remaining DNS alerts exceeds 10 since the last report execution"
			$DNSMessage += ""
			}
		if ( $Remaining.Count -lt 10 )
			{
			$DNSMessage += ($Remaining | sort -property Name | ft TimeRaised,NetbiosComputerName,Name -auto -wrap)
			$DNSMessage += ""
			}
		$DNSMessage += ""
		$DNSMessage += "#========================================================"
		$DNSMessage += ""
		}

	$DNSMessage += ""
	$DNSMessage += "DNS Alert names:"
	$DNSMessage += "#==================="
	$DNSMessage += ($DNSAlerts | sort -uniq | ft Name -auto -wrap)
	$DNSMessage += ""
	}

$DNSMessage

$DNSMessage = $DNSMessage | out-string

#============================================================


  $Result = "GOOD"
  $Message = "Daily DNS alerts report for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Summary Report completed for ($date). `n `n$DNSMessage")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DNSMessage)


# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Report Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.DNSAlerts.Synthetic.Monitor.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DNSAlerts.Synthetic.Monitor.WA.v1058.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Proactive DNS Synthetic internal/external PowerShell script
#
#  Author:  Kevin Justin
#  v1.0
#=================================================================================
# param([string]$DriveLetter #,[string]$ComputerName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $ComputerName = "computername.domain.com"
$ComputerName = $env:ComputerName

$ExternalDNS = "google.com"
$InternalDNS = "ds.army.mil"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
$ScriptName = "Proactive.DNSAlerts.Synthetic.Monitor.WA.v1058.ps1"
$EventID = "548"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag()

#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Synthetic Script is starting. `n Running as ($whoami).")
#=================================================================================


# Begin MAIN script section
#=================================================================================
#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather Proactive DNS Alerts Synthetic monitor check for date ($date).")

$DSMessage = "Proactive DNS Alerts Synthetic monitor for date ($date)."

$DNSSyntheticOutput = @()

# Simple synthetic check
if ( -NOT ( Resolve-DnsName $InternalDNS -Server $_ -DnsOnly) )
	{
	Write-Host "Fail" -ForegroundColor Red
	$iDNS = "Fail"
	$DNSSyntheticOutput += "Internal DNS check $($InternalDNS) failed on $ComputerName"
	}


# Test external DNS
write-host "Testing External DNS" -ForegroundColor Yellow

# External DNS
if ( -NOT ( Resolve-DnsName $ExternalDNS -Server $_ -DnsOnly) )
	{
	Write-Host "Failed" -ForegroundColor Red
	$eDNS = "Fail"
	$DNSSyntheticOutput += "External DNS check $($ExternalDNS) failed on $ComputerName"
	}


if ( ( $iDNS -eq "Fail" ) -OR ( $eDNS -eq "Fail" ) )
	{
	$strCondition = "Bad"
	}


# Check for success
if ( ( $iDNS -eq $Null ) -AND ( $eDNS -eq $Null ) )
	{
	$strCondition = "Good"
	}


#Check the value of $strCondition
IF ( $strCondition -eq "Good" )
	{
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"NO SME/SystemOwner/SysAdmin/Server action required")
	$bag.AddValue('Result',$strCondition)
	}

IF ( $strCondition -eq "Bad" )
	{
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$DNSSyntheticOutput")
	$bag.AddValue('Result',$strCondition)
	$bag.AddValue('Summary',$DNSSyntheticOutput)
	}

# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Synthetic Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Alert.WA.v1058.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DNS alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Alert.WA.v1058.ps1"
$EventID = "549"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting.  Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather DNS Scavenging Alerts task for date ($date).")


# Grab past week
$Time = [DateTime](Get-Date).AddDays(-7)


$DNSAlerts = get-scomalert -name "*Scavenging*" | where { $_.TimeRaised -gt $Time }
$DNSAlerts.Count


$DNSMessage = @()

if ( $DNSAlerts.Count -eq 0 )
	{
	$DNSMessage += "ZERO DNS Scavenging alerts task for the past week ($date)."
	}

if ( $DNSAlerts.Count -gt 0 )
	{
	$DNSMessage += ""
	
	# Show DNS alerts by Time Raised,NetBiosComputerName,Message
	#
	$DNSMessage += "# DNS Scavenging alerts report for $($date)"
	$DNSMessage += ""
	$DNSMessage += "# Count of DNS Scavenging alerts = $($DNSAlerts.Count)"
	$DNSMessage += "#========================================================"
	$DNSMessage += ""

	if ( $($DNSAlerts | where { $_.Name -like "*2501*" } ).Count -gt 0 )
		{
		$DNSMessage += "DNS Scavenging Alert Event 2501 Details"
		$DNSMessage += "#========================================================"
		$DNSMessage +=  $DNSAlerts | where { $_.Name -like "*2501*" } | format-table NetbiosComputerName,TimeRaised,Parameters -auto -wrap
		$DNSMessage += "#========================================================"
		}

	if ( $($DNSAlerts | where { $_.Name -like "*2502*" } ).Count -gt 0 )
		{
		$DNSMessage += ""
		$DNSMessage += "DNS Scavenging Alert Event 2502 Details"
		$DNSMessage += "#========================================================"
		$DNSMessage +=  $DNSAlerts | where { $_.Name -like "*2502*" } | format-table NetbiosComputerName,TimeRaised,Parameters -auto -wrap
		$DNSMessage += "#========================================================"
		}

	if ( $($DNSAlerts | where { $_.Name -like "Proactive DailyTasks DNSAlerts Scavenging Summary*" } ).Count -gt 0 )
		{
		$DNSMessage += ""
		$DNSMessage += "# Weekly Reports alerts run in past week"
		$DNSMessage += "#========================================================"
		$DNSMessage += $DNSAlerts | where { $_.Name -like "Proactive DailyTasks DNSAlerts Scavenging Summary*" } | format-table TimeRaised -auto -wrap
		$DNSMessage += "#========================================================"
		}
		
	if ( $($DNSAlerts | where { ( $_.Name -notlike "*2501*" ) -AND ( $_.Name -notlike "*2502*" ) `
		-AND ( $_.Name -notlike "Proactive DailyTasks DNSAlerts Scavenging Summary*" ) } ).Count -gt 0 )
		{
		$DNSMessage += ""
		$DNSMessage += "# Remaining alerts"
		$DNSMessage += "#========================================================"
		$DNSMessage += $DNSAlerts | where { ( $_.Name -notlike "*2501*" ) -AND ( $_.Name -notlike "*2502*" ) `
		-AND ( $_.Name -notlike "Proactive DailyTasks DNSAlerts Scavenging Summary*" )  -AND ( $_.Name -notlike "*Proactive DNSAlerts Scavenging Close Task Alert*" )  } `
		| format-table TimeRaised,Name
		$DNSMessage += "#========================================================"
		}
	$DNSMessage += ""
	}

$DNSMessage

$DNSMessage = $DNSMessage | out-string

#============================================================


  $Result = "GOOD"
  $Message = "DNS Scavenging alerts report for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message `n `n$DNSMessage")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DNSMessage)


# Return all bags
$bag

#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Scavenging Report Script Completed.  Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Alert.WA.v1058.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DNS scavenging alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Alert.WA.v1058.ps1"
$EventID = "549"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting.  Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather DNS Scavenging Close task for date ($date).")


# Grab past week
$Time = [DateTime](Get-Date).AddDays(-7)


$DNSAlerts = get-scomalert -name "*Scavenging*" -ResolutionState (0..254) | where { $_.TimeRaised -gt $Time }
#$DNSAlerts.Count

# Gather WINOS alerts
## Grab the MP, get the Monitors and Rules from the MP, then grab all alerts found inside the Monitors/Rules
$SCOMCoreMP = Get-SCOMManagementPack -DisplayName "Microsoft Windows Server 2016 DNS Monitoring Addendum"
$SCOMCoreRules = $SCOMCoreMP.GetRules()
$SCOMCoreMonitors = $SCOMCoreMP.GetMonitors()

$SCOMCoreReportAlerts = Get-SCOMAlert -ResolutionState (0..254) | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
#$SCOMCoreReportAlerts.Count

$SCOMOpenReportAlerts = $SCOMCoreReportAlerts
#$SCOMOpenReportAlerts.Count

$SCOMCoreRuleAlerts = $SCOMCoreReportAlerts | ? { ( $_.Name -in $SCOMCoreRules.DisplayName) }
#$SCOMCoreRuleAlerts.Count

$SCOMCoreMonitorAlerts = $SCOMCoreReportAlerts | ? { ($_.Name -in $SCOMCoreMonitors.DisplayName ) }
#$SCOMCoreMonitorAlerts.Count

$AutoClosed = $SCOMCoreMonitorAlerts.Count + $SCOMCoreRuleAlerts.Count
$Test = $SCOMCoreReportAlerts.Count

# Open/Closed breakout
$OpenDNSAlerts = $SCOMCoreReportAlerts
#$OpenDNSAlerts.Count
$ClosedDNSAlerts = Get-SCOMAlert -ResolutionState 255 | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
#$ClosedDNSAlerts.Count


$DNSMessage= @()

#
# Build report
if ($SCOMOpenReportAlerts.Count -eq 0 )
	{
	#$Message = "ZERO DNS 2016+ alerts for ($date)"
	$DNSMessage = "ZERO DNS Scavenging alerts for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}

if ($SCOMOpenReportAlerts.Count -gt 0 )
	{
	$DNSMessage += ""
	$DNSMessage += "Alert Count = $($SCOMOpenReportAlerts.Count)"
	$DNSMessage += ""
	$DNSMessage += "# DNS Monitors auto-closed"
	$DNSMessage += "#=========================================================="
	$DNSMessage += "# Number of historical DNS alerts = $($SCOMCoreReportAlerts.Count)"
	$DNSMessage += "# Number of OPEN DNS alert monitors AND rules = $($SCOMOpenReportAlerts.Count)"
	$DNSMessage += "#=========================================================="
	$DNSMessage += ""
	$DNSMessage += "#==============================================="
	$DNSMessage += "# Monitors AND Rules that were auto closed = $($AutoClosed)"
	$DNSMessage += "#==============================================="
	$DNSMessage += ""
	#$DNSMessage += "#================================================"
	#$DNSMessage += "# List of included Monitor/Rule names auto-closed"
	#$DNSMessage += "#================================================"
	#$DNSMessage += "# Monitors"
	#$DNSMessage += $DNSMonitorsToAutoClose | out-string
	#$DNSMessage += "# Rules"
	#$DNSMessage += $DNSRulesToAutoClose | out-string
	#$DNSMessage += "#============================================================"
	#$DNSMessage += ""
	}

$DNSMessage

$DNSMessage = $DNSMessage | out-string

#============================================================


  $Result = "GOOD"
  $Message = "DNS Scavenging alerts close for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message `n `n$DNSMessage")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DNSMessage)


# Return all bags
$bag

$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Scavenging rule close completed for ($date).")

#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"DNS Close Script Completed.  Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Proactive.DNS.Repeated.Event.MonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="RepeatedEventRaised" NoDetection="false" />
          <MonitorTypeState ID="TimerEventRaised" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="LogName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ErrorExpression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="AutoResolveInterval" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimerWindowInSeconds" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="RepeatCount" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="ErrorDataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <LogName>$Config/LogName$</LogName>
            </DataSource>
            <ProbeAction ID="OnDemandReset" TypeID="System!System.PassThroughProbe" />
            <ConditionDetection ID="ErrorFilterCondition" TypeID="System!System.ExpressionFilter">
              <Expression>$Config/ErrorExpression$</Expression>
            </ConditionDetection>
            <ConditionDetection ID="RepeatedDataCondition" TypeID="System!System.ConsolidatorCondition">
              <Consolidator>
                <ConsolidationProperties />
                <TimeControl>
                  <WithinTimeSchedule>
                    <Interval>$Config/TimerWindowInSeconds$</Interval>
                  </WithinTimeSchedule>
                </TimeControl>
                <CountingCondition>
                  <Count>$Config/RepeatCount$</Count>
                  <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
                </CountingCondition>
              </Consolidator>
            </ConditionDetection>
            <ConditionDetection ID="TimerCondition" TypeID="System!System.TimerCondition">
              <TimerWaitInSeconds>$Config/AutoResolveInterval$</TimerWaitInSeconds>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RepeatedEventRaised">
              <Node ID="RepeatedDataCondition">
                <Node ID="ErrorFilterCondition">
                  <Node ID="ErrorDataSource" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="TimerEventRaised">
              <Node ID="TimerCondition">
                <Node ID="RepeatedDataCondition">
                  <Node ID="ErrorFilterCondition">
                    <Node ID="ErrorDataSource" />
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="TimerEventRaised">
              <Node ID="OnDemandReset" />
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Windows.DNS.Service.Monitor.MonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="Running" NoDetection="false" />
          <MonitorTypeState ID="NotRunning" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ServiceName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="CheckStartupType" minOccurs="0" maxOccurs="1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Samples" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="CheckStartupType" Selector="$Config/CheckStartupType$" ParameterType="string" />
          <OverrideableParameter ID="Samples" Selector="$Config/Samples$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.Win32ServiceInformationProvider">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <ServiceName>$Config/ServiceName$</ServiceName>
              <Frequency>$Config/IntervalSeconds$</Frequency>
              <DisableCaching>true</DisableCaching>
              <CheckStartupType>$Config/CheckStartupType$</CheckStartupType>
            </DataSource>
            <ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.Win32ServiceInformationProbe">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <ServiceName>$Config/ServiceName$</ServiceName>
            </ProbeAction>
            <ConditionDetection ID="ServiceRunning" TypeID="System!System.ExpressionFilter">
              <Expression>
                <Or>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='StartMode']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value>
                        <!-- 0=BootStart 1=SystemStart 2=Automatic 3=Manual 4=Disabled -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value>
                        <!-- 0=Unknown 1=Stopped 2=StartPending 3=StopPending 4=Running 5=ContinuePending 6=PausePending 7=Paused 8=ServiceNotFound 9=ServerNotFound -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="ServiceNotRunning" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='StartMode']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value>
                        <!-- 0=BootStart 1=SystemStart 2=Automatic 3=Manual 4=Disabled -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value>
                        <!-- 0=Unknown 1=Stopped 2=StartPending 3=StopPending 4=Running 5=ContinuePending 6=PausePending 7=Paused 8=ServiceNotFound 9=ServerNotFound -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
              <SuppressionSettings>
                <MatchCount>$Config/Samples$</MatchCount>
              </SuppressionSettings>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Running">
              <Node ID="ServiceRunning">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="NotRunning">
              <Node ID="ServiceNotRunning">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="Running">
              <Node ID="ServiceRunning">
                <Node ID="Probe" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="NotRunning">
              <Node ID="ServiceNotRunning">
                <Node ID="Probe" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Proactive.DNSAlerts.Synthetic.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="MatchCount" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="MatchCount" Selector="$Config/MatchCount$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Proactive.DNSAlerts.Synthetic.Monitor.Datasource">
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <SuppressionSettings>
                <MatchCount>$Config/MatchCount$</MatchCount>
              </SuppressionSettings>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="Windows.DNS.Root.Domain.Controllers.Group.DiscoveryRule" Enabled="true" Target="Windows.DNS.Root.Domain.Controllers.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="Windows.DNS.Root.Domain.Controllers.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWD2!Microsoft.Windows.DNSServer.2016.Server"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)BELVA1[HN][EP]PHUB001|CARSA1NWPHUB001|HUACA1COP000001|HUACW4NHAAA1SV1|JBSAW4NHAAH2SW1|ORLAA1SEPHUB001</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="Windows.DNS.Server.IP.Address.Root.Domain.Controllers.Group.DiscoveryRule" Enabled="true" Target="Windows.DNS.Server.IP.Address.Root.Domain.Controllers.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="Windows.DNS.Server.IP.Address.Root.Domain.Controllers.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWD2!Microsoft.Windows.DNSServer.2016.Server.IPAddress"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)BELVA1[HN][EP]PHUB001|CARSA1NWPHUB001|HUACA1COP000001|HUACW4NHAAA1SV1|JBSAW4NHAAH2SW1|ORLAA1SEPHUB001</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="Windows.DNS.Forwarder.Conditional.Forward.Root.Domain.Controllers.Group.DiscoveryRule" Enabled="true" Target="Windows.DNS.Forwarder.Conditional.Forward.Root.Domain.Controllers.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="Windows.DNS.Forwarder.Conditional.Forward.Root.Domain.Controllers.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWD2!Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Forward"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)BELVA1[HN][EP]PHUB001|CARSA1NWPHUB001|HUACA1COP000001|HUACW4NHAAA1SV1|JBSAW4NHAAH2SW1|ORLAA1SEPHUB001</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="Windows.DNS.Zone.Root.Domain.Controllers.Group.DiscoveryRule" Enabled="true" Target="Windows.DNS.Zone.Root.Domain.Controllers.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="Windows.DNS.Zone.Root.Domain.Controllers.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWD2!Microsoft.Windows.DNSServer.2016.Zone"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)BELVA1[HN][EP]PHUB001|CARSA1NWPHUB001|HUACA1COP000001|HUACW4NHAAA1SV1|JBSAW4NHAAH2SW1|ORLAA1SEPHUB001</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="Windows.DNS.Seed.Discovery" Enabled="true" Target="Windows!Microsoft.Windows.Server.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Windows.DNS.Seed">
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DSDiscovery.Seed" TypeID="Windows!Microsoft.Windows.FilteredRegistryDiscoveryProvider">
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <RegistryAttributeDefinitions>
            <RegistryAttributeDefinition>
              <AttributeName>Search</AttributeName>
              <Path>SYSTEM\CurrentControlSet\Services\DNS</Path>
              <PathType>0</PathType>
              <AttributeType>0</AttributeType>
            </RegistryAttributeDefinition>
          </RegistryAttributeDefinitions>
          <Frequency>86400</Frequency>
          <ClassId>$MPElement[Name="Windows.DNS.Seed"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Values/Search</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">True</Value>
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </DataSource>
      </Discovery>
      <Discovery ID="Windows.DNS.Seed.Scavenging.Class.Discovery" Enabled="true" Target="Windows.DNS.Seed" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Windows.DNS.Seed.Scavenging.Class" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.FilteredRegistryDiscoveryProvider">
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <RegistryAttributeDefinitions>
            <RegistryAttributeDefinition>
              <AttributeName>ScavengingIntervalRegKeyExists</AttributeName>
              <Path>SYSTEM\CurrentControlSet\Services\DNS\Parameters\ScavengingInterval</Path>
              <PathType>1</PathType>
              <!-- 0=regKey 1=regValue -->
              <AttributeType>0</AttributeType>
              <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
            </RegistryAttributeDefinition>
          </RegistryAttributeDefinitions>
          <Frequency>86400</Frequency>
          <ClassId>$MPElement[Name="Windows.DNS.Seed.Scavenging.Class"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="Boolean">Values/ScavengingIntervalRegKeyExists</XPathQuery>
                <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
              </ValueExpression>
              <Operator>Equal</Operator>
              <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
              <ValueExpression>
                <Value Type="Boolean">true</Value>
                <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="Proactive.DailyTasks.DNSAlerts.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DailyTasks.DNSAlerts.Close.Script.DataSource">
            <TimeoutSeconds>900</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DNSAlerts.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DNSAlerts.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">547</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern> DNS Monitors auto-closed for </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DNSAlerts.Report.Script.Task.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.DataSource">
            <TimeoutSeconds>600</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">549</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Daily DNS alerts report for </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DNSAlerts.Report.Script.Task.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceNotFound.Recovery.Rule" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3751</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dnsserver</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceNotFound.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceFoundRunning.Recovery.Rule" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3752</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dnsserver</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceFoundRunning.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceRecoveryFailed.Recovery.Rule" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3753</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dnsserver</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceRecoveryFailed.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.TooManyRecoveryAttempts.Recovery.Rule" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3754</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dnsserver</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.DNSServer.2016.DNS.Service.NotFound.Recovery.Rule" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3751</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dns</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DNSServer.2016.DNS.Service.NotFound.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.DNSServer.2016.DNS.Service.FoundRunning.Recovery.Rule" Enabled="false" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3752</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dns</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DNSServer.2016.DNS.Service.FoundRunning.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.DNSServer.2016.DNS.Service.RecoveryFailed.Recovery.Rule" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3753</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dns</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DNSServer.2016.DNS.Service.RecoveryFailed.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.DNSServer.2016.DNS.Service.TooManyRecoveryAttempts.Recovery.Rule" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3754</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>dns</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DNSServer.2016.DNS.Service.TooManyRecoveryAttempts.Recovery.Rule"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DNSAlerts.Scavenging.Event.2501.Alert.Rule" Enabled="true" Target="Windows.DNS.Seed.Scavenging.Class" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>DNS Server</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">2501</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>scavenging</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DNSAlerts.Scavenging.Event.2501.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.DataSource">
            <TimeoutSeconds>600</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">549</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>DNS Scavenging alerts report for </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">549</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>DNS Scavenging alerts close for</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Proactive.DailyTasks.DNSAlerts.Report.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DailyTasks.DNSAlerts.Close.Script.Alert.WA">
          <TimeoutSeconds>900</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.WA">
          <TimeoutSeconds>600</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DailyTasks.DNSAlerts.Synthetic.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DNSAlerts.Synthetic.Monitor.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Alert.WA">
          <TimeoutSeconds>600</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Alert.WA">
          <TimeoutSeconds>600</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">4015</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>15</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.ADI.404.SocketFailure.Monitor" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.ADI.404.SocketFailure.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">404</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>5</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.ADI.408.OpenSocket.Monitor" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.ADI.408.OpenSocket.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">408</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>5</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.ADI.3152.FileError.Monitor" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.ADI.3152.FileError.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">3152</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>2</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.ADI.4000.OpenFailed.Monitor" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.ADI.4000.OpenFailed.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">4000</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>5</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.ADI.4011.IntegratedWriteFailed.Monitor" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.ADI.4011.IntegratedWriteFailed.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">4011</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>10</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.ADI.4016.LDAPTimeout.Monitor" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.ADI.4016.LDAPTimeout.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">4015</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>5</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.ADI.4019.LoadFailed.Monitor" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.ADI.4019.LoadFailed.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">4015</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>5</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.ADI.4521.OperationsFailed.Monitor" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.ADI.4521.OperationsFailed.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">4521</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>5</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.ADI.7616.TrustAnchorsFailed.Monitor" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.ADI.7616.TrustAnchorsFailed.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">7616</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>2</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Proactive.DNSAlerts.Synthetic.Monitor" Accessibility="Public" Enabled="false" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Proactive.DNSAlerts.Synthetic.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Proactive.DNSAlerts.Synthetic.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Summary']$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <TimeoutSeconds>600</TimeoutSeconds>
          <MatchCount>1</MatchCount>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DNSServer.2016.Event.2502.ScavengingFailed.Monitor" Accessibility="Public" Enabled="true" Target="Windows.DNS.Seed.Scavenging.Class" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DNSServer.2016.Event.2502.ScavengingFailed.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Context/DataItem/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
          <OperationalState ID="RepeatedEventRaised" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>DNS Server</RepeatedLogName>
          <RepeatedExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="UnsignedInteger">2502</Value>
              </ValueExpression>
            </SimpleExpression>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>600</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>2</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>1800</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
    </Monitors>
    <Recoveries>
      <Recovery ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.Recovery" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" Monitor="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor" ResetMonitor="true" ExecuteOnState="Warning" Remotable="true" Timeout="300">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
          <ScriptName>Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.Service.Recovery.v1058.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Script to restart a service
#
#  Author:  Kevin Holman
#
#  Version:  1.0
#
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $ServiceName = "dns"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging
$ScriptName = "Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.Service.Recovery.v1058.ps1"
$EventID = "3750"
#=================================================================================


# Starting Script section
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#=================================================================================


# Begin MAIN script section
#=================================================================================

[string]$ServiceName = "dns"

#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Recovery script for service: ($ServiceName) is starting. `n Running as ($whoami).")
write-host "Recovery script for service: ($ServiceName) is starting. Running as ($whoami)."

#Get the service object
$Svc = Get-Service $ServiceName

#Check to ensure the service exists:
IF (!$Svc)
{
  $momapi.LogScriptEvent($ScriptName,3751,2, "`n Service ($ServiceName) was not found on this computer. `n This indicates a misconfiguration of the monitor. `n Error is ($error)")
  write-host "Service ($ServiceName) was not found on this computer. This indicates a misconfiguration of the monitor. Error is ($error)"
  EXIT
}

#Get Service Status:
[string]$SvcStatus = $Svc.Status

#Do not continue is service is already running
IF ($SvcStatus -eq "Running")
{
  $momapi.LogScriptEvent($ScriptName,3752,2, "`n Service ($ServiceName) was found to be in the Running state. `n This indicates a misconfiguration of the monitor. `n No recovery action will be taken.")
  write-host "Service ($ServiceName) was found to be in the Running state. This indicates a misconfiguration of the monitor. No recovery action will be taken."
  EXIT  
}

#Log recovery information event
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted.")
write-host "Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted."

#Attempt First Recovery
Restart-Service -Name $ServiceName -Force
#Wait time in seconds
Start-Sleep 20
#Get the service object
$Svc = Get-Service $ServiceName
#Get Service Status:
$SvcStatus = $Svc.Status

IF ($SvcStatus -ne "Running")
{
  #Attempt Second Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) second attempt at recovering starting now.")
  write-host "Service: ($ServiceName) second attempt at recovering starting now."  
  Restart-Service -Name $ServiceName -Force
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -ne "Running")
{
  #Attempt Third Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) third attempt at recovering starting now.")
  write-host "Service: ($ServiceName) third attempt at recovering starting now."    
  Restart-Service -Name $ServiceName -Force
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -eq "Running")
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was successfully restarted and then detected to be in the Running state.")
  write-host "Service: ($ServiceName) was successfully restarted and then detected to be in the Running state."
}
ELSE
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,3753,2,"`n Service: ($ServiceName) is not running. `n Recovery was attempted and failed. `n Manual interventon is required. `n The last detected service status was ($SvcStatus).") 
  write-host "Service: ($ServiceName) is not running. Recovery was attempted and failed. Manual interventon is required. The last detected service status was ($SvcStatus)."
}

# Check to see if this recovery script has been run multiple times in the last x minutes for detection of too many recovery actions
$Message = "*($ServiceName) is starting*"
$Events = Get-EventLog -LogName 'Operations Manager' -After $StartTime.AddMinutes(-60) -Message $Message | where {$_.EventID -eq 3750}
$EventCount = $Events.Count
IF ($EventCount -ge 3)
{
  $momapi.LogScriptEvent($ScriptName,3754,2,"`n Too many service recoveries have been attempted for ($ServiceName). `n ($EventCount) recoveries are detected in the event log. `n Manual interventon is required.")
  write-host "Too many service recoveries have been attempted for ($ServiceName). ($EventCount) recoveries are detected in the event log. Manual interventon is required."
}

# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
write-host "Script Completed. Script Runtime: ($ScriptTime) seconds."
#=================================================================================
# End of script	  
		  </ScriptBody>
          <TimeoutSeconds>240</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="Microsoft.Windows.DNSServer.2016.DNS.Service.Recovery" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Service.Running" ResetMonitor="true" ExecuteOnState="Error" Remotable="true" Timeout="300">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
          <ScriptName>Microsoft.Windows.DNSServer.2016.DNS.Service.Recovery.v1058.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Script to restart a service
#
#  Author:  Kevin Holman
#
#  Version:  1.0
#
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $ServiceName = "dns"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging
$ScriptName = "Microsoft.Windows.DNSServer.2016.DNS.Service.Recovery.v1058.ps1"
$EventID = "3750"
#=================================================================================


# Starting Script section
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#=================================================================================


# Begin MAIN script section
#=================================================================================

[string]$ServiceName = "dns"

#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Recovery script for service: ($ServiceName) is starting. `n Running as ($whoami).")
write-host "Recovery script for service: ($ServiceName) is starting. Running as ($whoami)."

#Get the service object
$Svc = Get-Service $ServiceName

#Check to ensure the service exists:
IF (!$Svc)
{
  $momapi.LogScriptEvent($ScriptName,3751,2, "`n Service ($ServiceName) was not found on this computer. `n This indicates a misconfiguration of the monitor. `n Error is ($error)")
  write-host "Service ($ServiceName) was not found on this computer. This indicates a misconfiguration of the monitor. Error is ($error)"
  EXIT
}

#Get Service Status:
[string]$SvcStatus = $Svc.Status

#Do not continue is service is already running
IF ($SvcStatus -eq "Running")
{
  $momapi.LogScriptEvent($ScriptName,3752,2, "`n Service ($ServiceName) was found to be in the Running state. `n This indicates a misconfiguration of the monitor. `n No recovery action will be taken.")
  write-host "Service ($ServiceName) was found to be in the Running state. This indicates a misconfiguration of the monitor. No recovery action will be taken."
  EXIT  
}

#Log recovery information event
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted.")
write-host "Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted."

#Attempt First Recovery
#Restart-Service -Name $ServiceName -Force
get-Service -Name $ServiceName | start-service
#Wait time in seconds
Start-Sleep 20
#Get the service object
$Svc = Get-Service $ServiceName
#Get Service Status:
$SvcStatus = $Svc.Status

IF ($SvcStatus -ne "Running")
{
  #Attempt Second Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) second attempt at recovering starting now.")
  write-host "Service: ($ServiceName) second attempt at recovering starting now."  
  #Restart-Service -Name $ServiceName -Force 
  get-Service -Name $ServiceName | start-service
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -ne "Running")
{
  #Attempt Third Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) third attempt at recovering starting now.")
  write-host "Service: ($ServiceName) third attempt at recovering starting now."    
  #Restart-Service -Name $ServiceName -Force
  get-Service -Name $ServiceName | start-service
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -eq "Running")
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was successfully restarted and then detected to be in the Running state.")
  write-host "Service: ($ServiceName) was successfully restarted and then detected to be in the Running state."
}
ELSE
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,3753,2,"`n Service: ($ServiceName) is not running. `n Recovery was attempted and failed. `n Manual interventon is required. `n The last detected service status was ($SvcStatus).") 
  write-host "Service: ($ServiceName) is not running. Recovery was attempted and failed. Manual interventon is required. The last detected service status was ($SvcStatus)."
}

# Check to see if this recovery script has been run multiple times in the last x minutes for detection of too many recovery actions
$Message = "*($ServiceName) is starting*"
$Events = Get-EventLog -LogName 'Operations Manager' -After $StartTime.AddMinutes(-60) -Message $Message | where {$_.EventID -eq 3750}
$EventCount = $Events.Count
IF ($EventCount -ge 3)
{
  $momapi.LogScriptEvent($ScriptName,3754,2,"`n Too many service recoveries have been attempted for ($ServiceName). `n ($EventCount) recoveries are detected in the event log. `n Manual interventon is required.")
  write-host "Too many service recoveries have been attempted for ($ServiceName). ($EventCount) recoveries are detected in the event log. Manual interventon is required."
}

# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
write-host "Script Completed. Script Runtime: ($ScriptTime) seconds."
#=================================================================================
# End of script		  
		  </ScriptBody>
          <TimeoutSeconds>240</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="Microsoft.Windows.DNSServer.2016.DNS.WMIValidation.Recovery" Accessibility="Public" Enabled="true" Target="MWD2!Microsoft.Windows.DNSServer.2016.Server" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Service.Running" ResetMonitor="true" ExecuteOnState="Error" Remotable="true" Timeout="300">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DNSAlerts.Synthetic.Monitor.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Recovery>
    </Recoveries>
    <Overrides>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Server.Property.Discovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Server.Property.Discovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Server.Property.Discovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Server.Property.Discovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.TrustPoint.Discovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.TrustPoint.Discovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.TrustPoint.Discovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.TrustPoint.Discovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Discovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Discovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Discovery" Context="Windows.DNS.Forwarder.Conditional.Forward.Root.Domain.Controllers.Group" ContextInstance="31516f6c-e158-259f-9525-b46559698bfd" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Discovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.ClientSubnet.Discovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.ClientSubnet.Discovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.ClientSubnet.Discovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.ClientSubnet.Discovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.RecursionScope.Discovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.RecursionScope.Discovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.RecursionScope.Discovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.RecursionScope.Discovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Policy.ServerLevel.Discovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Policy.ServerLevel.Discovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Policy.ServerLevel.Discovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Policy.ServerLevel.Discovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.ZoneScope.Discovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.ZoneScope.Discovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.ZoneScope.Discovery" Context="Windows.DNS.Zone.Root.Domain.Controllers.Group" ContextInstance="5b97f662-96ef-1f3e-1784-18cfe1fe811d" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.ZoneScope.Discovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.0to10PercentDiscovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.0to10PercentDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.0to10PercentDiscovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.0to10PercentDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.70to80PercentDiscovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.70to80PercentDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.70to80PercentDiscovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.70to80PercentDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.20to30PercentDiscovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.20to30PercentDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.20to30PercentDiscovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.20to30PercentDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.30to40PercentDiscovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.30to40PercentDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.30to40PercentDiscovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.30to40PercentDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.50to60PercentDiscovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.50to60PercentDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.50to60PercentDiscovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.50to60PercentDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.DNSDomain.Discovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.DNSDomain.Discovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.DNSDomain.Discovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.DNSDomain.Discovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.60to70PercentDiscovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.60to70PercentDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.60to70PercentDiscovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.60to70PercentDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.80to90PercentDiscovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.80to90PercentDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.80to90PercentDiscovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.80to90PercentDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.90to100PercentDiscovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.90to100PercentDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.90to100PercentDiscovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.90to100PercentDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.40to50PercentDiscovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.40to50PercentDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.40to50PercentDiscovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.40to50PercentDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.10to20PercentDiscovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.10to20PercentDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.10to20PercentDiscovery" Context="Windows.DNS.Root.Domain.Controllers.Group" ContextInstance="1c71d791-20ba-4157-0f6d-9d4ad52040f7" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Zone.10to20PercentDiscovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.WINS.Discovery" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.WINS.Discovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.WINS.Discovery" Context="Windows.DNS.Zone.Root.Domain.Controllers.Group" ContextInstance="5b97f662-96ef-1f3e-1784-18cfe1fe811d" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.WINS.Discovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <DiscoveryPropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Discovery" Context="Windows.DNS.Forwarder.Conditional.Forward.Root.Domain.Controllers.Group" ContextInstance="31516f6c-e158-259f-9525-b46559698bfd" Enforced="false" Discovery="MWD2!Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Discovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
      <MonitorConfigurationOverride ID="Override.Critical.Microsoft.Windows.DNSServer.2016.Monitor.DetectQueryOverload.Monitor" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Monitor.DetectQueryOverload" Parameter="QPS_THRESHOLD_RED">
        <Value>750000</Value>
      </MonitorConfigurationOverride>
      <MonitorConfigurationOverride ID="Override.Warning.Microsoft.Windows.DNSServer.2016.Monitor.DetectQueryOverload.Monitor" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Monitor.DetectQueryOverload" Parameter="QPS_THRESHOLD_YELLOW">
        <Value>700000</Value>
      </MonitorConfigurationOverride>
      <MonitorConfigurationOverride ID="Override.Critical.Microsoft.Windows.DNSServer.2016.Monitor.DetectServerQueryOverload.Monitor" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Monitor.DetectServerQueryOverload" Parameter="QPS_THRESHOLD_RED">
        <Value>900000</Value>
      </MonitorConfigurationOverride>
      <MonitorConfigurationOverride ID="Override.Warning.Microsoft.Windows.DNSServer.2016.Monitor.DetectServerQueryOverload.Monitor" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Monitor.DetectServerQueryOverload" Parameter="QPS_THRESHOLD_YELLOW">
        <Value>750000</Value>
      </MonitorConfigurationOverride>
      <MonitorPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Monitor.DetectUnusedZone" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Monitor.DetectUnusedZone" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Forward.NSLookup" Context="MWD2!Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Forward" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Forward.NSLookup" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.NSLookup" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Zone.NSLookup" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.NSLookup" Context="Windows.DNS.Zone.Root.Domain.Controllers.Group" ContextInstance="5b97f662-96ef-1f3e-1784-18cfe1fe811d" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Zone.NSLookup" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Forward.NSLookup" Context="Windows.DNS.Forwarder.Conditional.Forward.Root.Domain.Controllers.Group" ContextInstance="31516f6c-e158-259f-9525-b46559698bfd" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Forward.NSLookup" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.IPAddress.NSLookup" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server.IPAddress" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.IPAddress.NSLookup" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Override.Group.Microsoft.Windows.DNSServer.2016.IPAddress.NSLookup" Context="Windows.DNS.Server.IP.Address.Root.Domain.Controllers.Group" ContextInstance="bcd9ccfd-e17a-a297-f741-336173e58862" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.IPAddress.NSLookup" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Zone.State" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Zone.State" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Override.Severity.Microsoft.Windows.DNSServer.2016.Server.LoggingLevel" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.Server.LoggingLevel" Property="AlertSeverity">
        <Value>Warning</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Override.Severity.Microsoft.Windows.DNSServer.2016.WMI.Validation.TestOne" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Monitor="MWD2!Microsoft.Windows.DNSServer.2016.WMI.Validation.TestOne" Property="AlertSeverity">
        <Value>Warning</Value>
      </MonitorPropertyOverride>
      <RuleConfigurationOverride ID="Override.Severity.Microsoft.Windows.DNSServer.2016.ADI.ZoneOperationFailed.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.ZoneOperationFailed" Parameter="Severity" Module="Alert">
        <Value>1</Value>
      </RuleConfigurationOverride>
      <RuleConfigurationOverride ID="Override.Severity.Microsoft.Windows.DNSServer.2016.ADI.ZoneConflict.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.ZoneConflict" Parameter="Severity" Module="Alert">
        <Value>1</Value>
      </RuleConfigurationOverride>
      <RuleConfigurationOverride ID="Override.Severity.Microsoft.Windows.DNSServer.2016.ADI.BackgroundLoadFailure.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.BackgroundLoadFailure" Parameter="Severity" Module="Alert">
        <Value>1</Value>
      </RuleConfigurationOverride>
      <RuleConfigurationOverride ID="Override.Severity.Microsoft.Windows.DNSServer.2016.ADI.OpenFailed" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.OpenFailed" Parameter="Severity" Module="Alert">
        <Value>1</Value>
      </RuleConfigurationOverride>
      <RuleConfigurationOverride ID="Override.Severity.Microsoft.Windows.DNSServer.2016.ADI.WriteFailed" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.WriteFailed" Parameter="Severity" Module="Alert">
        <Value>1</Value>
      </RuleConfigurationOverride>
      <RuleConfigurationOverride ID="Override.Severity.Microsoft.Windows.DNSServer.2016.ADI.LDAPTimeout" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.LDAPTimeout" Parameter="Severity" Module="Alert">
        <Value>1</Value>
      </RuleConfigurationOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.ZoneConflict.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.ZoneConflict" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.ZoneOperationFailed.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Zone" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.ZoneOperationFailed" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.RecordLoadFailed.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.RecordLoadFailed" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Enable.Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.InterfaceError" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Microsoft.Windows.DNSServer.2016.Collection.Warning" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.Collection.Warning" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Microsoft.Windows.Server.2016.AD.DNSServer.Warning.EventCollection" Context="MWSA6D!Microsoft.Windows.Server.2016.AD.DomainController.DNS" Enforced="false" Rule="MWSA6M!Microsoft.Windows.Server.2016.AD.DNSServer.Warning.EventCollection" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.LDAPTimeout" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.LDAPTimeout" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.BackgroundLoadFailure" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.BackgroundLoadFailure" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.RetryableZoneOperationFailed" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.RetryableZoneOperationFailed" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.Configuration.OpenSocketForAddress.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.Configuration.OpenSocketForAddress" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.Service.SocketFailure.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.Service.SocketFailure" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.WriteFailed.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.WriteFailed" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.OpenFailed.Rule" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.OpenFailed" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.Rules.DNSSEC.TALoadFailed" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.Rules.DNSSEC.TALoadFailed" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.Service.FileError" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.Service.FileError" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.SecurityInterfaceFailed" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.ADI.SecurityInterfaceFailed" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="Override.Disable.Microsoft.Windows.DNSServer.2016.RPC.Initialize.Failed" Context="MWD2!Microsoft.Windows.DNSServer.2016.Server" Enforced="false" Rule="MWD2!Microsoft.Windows.DNSServer.2016.RPC.Initialize.Failed" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
    </Overrides>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Proactive.DailyTasks.DNSAlerts.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DNSAlerts.Report.Script.Task.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceNotFound.Recovery.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceFoundRunning.Recovery.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceRecoveryFailed.Recovery.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.DNS.Service.NotFound.Recovery.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.DNS.Service.FoundRunning.Recovery.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.DNS.Service.RecoveryFailed.Recovery.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.DNS.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.404.SocketFailure.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.408.OpenSocket.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.3152.FileError.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.4000.OpenFailed.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.4011.IntegratedWriteFailed.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.4016.LDAPTimeout.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.4019.LoadFailed.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.4521.OperationsFailed.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.7616.TrustAnchorsFailed.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.Service.Monitor.AlertMessage" />
      <StringResource ID="Proactive.DNSAlerts.Synthetic.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DNSServer.2016.Event.2502.ScavengingFailed.Monitor.AlertMessage" />
      <StringResource ID="Proactive.DNSAlerts.Scavenging.Event.2501.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Task.Alert.Rule.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Microsoft.Windows.Server.DNS.Monitoring.Addendum">
          <Name>Microsoft Windows Server 2016 DNS Monitoring Addendum</Name>
          <Description>
v1.0.5.8  17 Jan 2025 - Disabled two rules - ADI Security failed and RPC Initialize
v1.0.5.7  30 Sep 2024 - Updated Scavenging alert rules
v1.0.5.6  23 Sep 2024 - New Scavenging close workflow DS/WA, task, alert rules, updated summary report remaining alerts
v1.0.5.2  10 Sep 2024 - Updated Scavenging task rule to field zero, Scavenging report task WA to include message
v1.0.5.0   9 Sep 2024 - Updated Scavenging rule AlertMessage fields, Scavenging report task, report DS/WA updated to remove summaries
v1.0.4.9  28 Aug 2024 - Updated Close DS/WA with ActiveMonitor.Id, updated summary report for Name,NetbiosComputerName,Parameters fields
v1.0.4.8  19 Aug 2024 - Added DNS Scavenging Class, RegKey Discovery, Rule, Monitor with updated AlertParameter
v1.0.4.1   9 Jan 2024 - Removed duplicate disable override for server property
v1.0.4.0   4 Jan 2024 - Resolution State logic improvements for large environments
v1.0.3.9  27 Dec 2023 - Whitespace audit, ResolutionState changes, performance changes to DS/WA
v1.0.3.7  29 Aug 2023 - Updated for generic import, Discovery and Override GUIDs
v1.0.3.6  18 Jul 2023 - Updated alert severity
v1.0.3.5  27 Jun 2023 - ADI DNS count monitors for 3152,7616
v1.0.3.4  13 Jun 2023 - Additional overrides to disable rules, added count logic monitors on DNS events, reports to informational
v1.0.3.3   9 Jun 2023 - WA for nslookups, Recovery task for WMI validations, Query overload value changes CRIT/WARN
v1.0.3.3  31 Jan 2023 - Added ADI 404,408 count monitors, DNS internal/external powershell monitor
v1.0.3.2  23 Jan 2023 - Updated Cleanup methods with get modules, ADI count monitors
v1.0.2.9   5 Jan 2023 - ADI and DNS Server logging alerts set to warning
v1.0.2.7  15 Jul 2022 - MonitorTypes, Recovery Automation
v1.0.2.2  14 Jun 2022 - Updated run times
v1.0.1.5  18 Mar 2022 - Updated overrides to disable except for root DNS servers, additional logic
v1.0.1.4   8 Dec 2021 - Updated Proactive.DailyTasks.DNSAlerts.Report.Script.Alert.Rule to 1200
v1.0.0.11 18 Mar 2021 - Updated Tasks, script versions
v1.0.1.1  11 May 2021 - Updated Report datasource, moving report to front, updated monitors/alerts
v1.0.0.13 26 Mar 2021 - Added 'Windows DNS - Active Directory Integrated Write Failed' to autoclose rules
v1.0.0.9  16 Mar 2021 - Updated Daily Summary and autoclose reports
v1.0.0.6  10 Mar 2021 - Added DailySummary datasource, task, rules, alerts
v1.0.0.3   9 Mar 2021 - Updated property, delivered pack with daily report/task, recovery automation for EventID 4015
v1.0.0.0   8 Feb 2021 - Created for DNS server alert tuning</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Root.Domain.Controllers.Group">
          <Name>Windows DNS - CONUS Domain Controllers</Name>
          <Description>3 Mar 2022 - Disabling DNS Discovery</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Server.IP.Address.Root.Domain.Controllers.Group">
          <Name>Windows DNS Server IP Address - CONUS domain controllers</Name>
          <Description>3 Mar 2022 - Disabling Windows DNS Server IP Address class</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Forwarder.Conditional.Forward.Root.Domain.Controllers.Group">
          <Name>Windows DNS Forwarder Conditional Forward - CONUS Domain Controllers</Name>
          <Description>3 Mar 2022 - Windows DNS Forwarder Conditional Forward</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Zone.Root.Domain.Controllers.Group">
          <Name>Windows DNS Zone - CONUS Domain Controllers</Name>
          <Description>18 Mar 2022 - Run nslookup checks on a subset of domain controllers</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Seed">
          <Name>Windows DNS Seed Class</Name>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Seed.Scavenging.Class">
          <Name>Windows DNS Seed Scavenging Class</Name>
        </DisplayString>

        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Close.Script.DataSource">
          <Name>Proactive DailyTasks DNSAlerts report and auto-close DataSource</Name>
          <Description>This datasource generates DNSAlerts report and auto-close DataSource</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.DataSource">
          <Name>Proactive DailyTasks DNSAlerts Summary Report and auto-close DataSource</Name>
          <Description>This datasource generates DNSAlerts Summary Report and auto-close DataSource</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Synthetic.Monitor.Datasource">
          <Name>Proactive DNS Alerts Synthetic monitor DataSource</Name>
          <Description>This datasource runs PowerShell nslookup script</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.DataSource">
          <Name>Proactive DailyTasks DNSAlerts Scavenging Summary Report and auto-close DataSource</Name>
          <Description>This datasource generates DNSAlerts Scavenging Summary Report and auto-close DataSource</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Close.Script.Alert.WA">
          <Name>Proactive DailyTasks DNSAlerts report and auto-close on-demand task</Name>
          <Description>This write-action task generates DNSAlerts report and auto-close DataSource</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.WA">
          <Name>Proactive DailyTasks DNSAlerts summary report and auto-close on-demand task</Name>
          <Description>This write-action task checks internal/external DNSAlerts summary report and auto-close write action</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Synthetic.Monitor.WA">
          <Name>Proactive DNS Alerts Synthetic monitor WA</Name>
          <Description>This write-action task runs PowerShell nslookup script</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Alert.WA">
          <Name>Proactive DailyTasks DNSAlerts Scavenging Summary Report and auto-close on-demand task</Name>
          <Description>This write-action task checks for scavenging events summarizing into DNSAlerts summary report and auto-close write action</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Alert.WA">
          <Name>Proactive DailyTasks DNSAlerts Scavenging close on-demand task</Name>
          <Description>This write-action task closes scavenging alerts write action</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DNS.Repeated.Event.MonitorType">
          <Name>Proactive DNS Repeated Event MonitorType</Name>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Service.Monitor.MonitorType">
          <Name>Windows DNS Service Monitor MonitorType</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Synthetic.MonitorType">
          <Name>Proactive DNS Alerts Synthetic monitor MonitorType</Name>
        </DisplayString>

        <DisplayString ElementID="Windows.DNS.Root.Domain.Controllers.Group.DiscoveryRule">
          <Name>Populate Windows DNS - Domain Controllers</Name>
          <Description>This discovery rule populates the group 'Windows DNS - Domain Controllers'</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Server.IP.Address.Root.Domain.Controllers.Group.DiscoveryRule">
          <Name>Populate Windows DNS Server IP Address - domain controllers</Name>
          <Description>This discovery rule populates the group 'Windows DNS Server IP Address - domain controllers'</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Forwarder.Conditional.Forward.Root.Domain.Controllers.Group.DiscoveryRule">
          <Name>Populate Windows DNS Forwarder Conditional Forward - domain controllers</Name>
          <Description>This discovery rule populates the group 'Windows DNS Forwarder Conditional Forward - domain controllers'</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Zone.Root.Domain.Controllers.Group.DiscoveryRule">
          <Name>Populate Windows DNS Zone - Domain Controllers</Name>
          <Description>This discovery rule populates the group 'Windows DNS Zone - Domain Controllers'</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.DNS.Seed.Scavenging.Class.Discovery">
          <Name>Windows DNS Seed Scavenging Class Discovery</Name>
        </DisplayString>

        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Report.Script.Alert.Rule">
          <Name>Proactive DailyTasks DNSAlerts Report Script Alert Rule</Name>
          <Description>Proactive Scheduled rule to kick off datasource at 0615 M-F</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DNSAlerts Report Script Alert Rule</Name>
          <Description>{1}

{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.Rule">
          <Name>Proactive DailyTasks DNSAlerts Summary Report Script Alert Rule</Name>
          <Description>Proactive Scheduled rule to kick off summary datasource at 0615 M-F</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DNSAlerts Summary Report Script Alert Rule</Name>
          <Description>{1}

{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Report.Script.Task.Alert.Rule">
          <Name>Proactive DailyTasks DNSAlerts task Report Manual Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Report.Script.Task.Rule.AlertMessage">
          <Name>Proactive DailyTasks DNSAlerts Report Script Task Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Task.Alert.Rule">
          <Name>Proactive DailyTasks DNSAlerts Summary Report Manual Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DNSAlerts Summary Report Script Task Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceNotFound.Recovery.Rule">
          <Name>Microsoft Windows Server DNS ADI Interface Error Service Recovery Failed - Service Not Found Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceNotFound.Recovery.Rule.AlertMessage">
          <Name>Microsoft Windows Server DNS ADI Interface Error Service Recovery Failed - Service Not Found</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceFoundRunning.Recovery.Rule">
          <Name>Microsoft Windows Server DNS ADI Interface Error Service Recovery Failed - Service Already Running Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceFoundRunning.Recovery.Rule.AlertMessage">
          <Name>Microsoft Windows Server DNS ADI Interface Error Service Recovery Failed - Service Already Running</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceRecoveryFailed.Recovery.Rule">
          <Name>Microsoft Windows Server DNS ADI Interface Error Service Recovery Failed - Service is not running Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.ServiceRecoveryFailed.Recovery.Rule.AlertMessage">
          <Name>Microsoft Windows Server DNS ADI Interface Error Service Recovery Failed - Service is not running</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.TooManyRecoveryAttempts.Recovery.Rule">
          <Name>Microsoft Windows Server DNS ADI Interface Error Service Recovery has attempted to recover the service too many times Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage">
          <Name>Microsoft Windows Server DNS ADI Interface Error Service Recovery has attempted to recover the service too many times</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.NotFound.Recovery.Rule">
          <Name>Microsoft Windows DNSServer 2016 DNS Service Recovery Failed - Service Not Found Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.NotFound.Recovery.Rule.AlertMessage">
          <Name>Microsoft Windows DNSServer 2016 DNS Service Recovery Failed - Service Not Found</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.FoundRunning.Recovery.Rule">
          <Name>Microsoft Windows DNSServer 2016 DNS Service Failed - Service Already Running Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.FoundRunning.Recovery.Rule.AlertMessage">
          <Name>Microsoft Windows DNSServer 2016 DNS Service Recovery Failed - Service Already Running</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.RecoveryFailed.Recovery.Rule">
          <Name>Microsoft Windows DNSServer 2016 DNS Service Recovery Failed - Service is not running Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.RecoveryFailed.Recovery.Rule.AlertMessage">
          <Name>Microsoft Windows DNSServer 2016 DNS Service Recovery Failed - Service is not running</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.TooManyRecoveryAttempts.Recovery.Rule">
          <Name>Microsoft Windows DNSServer 2016 DNS Service Recovery has attempted to recover the service too many times Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage">
          <Name>Microsoft Windows DNSServer 2016 DNS Service Recovery has attempted to recover the service too many times</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.FoundRunning.Recovery.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.FoundRunning.Recovery.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Scavenging.Event.2501.Alert.Rule">
          <Name>Proactive DNSAlerts Scavenging Event 2501 Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Scavenging.Event.2501.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Scavenging.Event.2501.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Scavenging.Event.2501.Alert.Rule.AlertMessage">
          <Name>Proactive DNSAlerts Scavenging Event 2501 Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Alert.Rule">
          <Name>Proactive DailyTasks DNSAlerts Scavenging Summary Report Script Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DNSAlerts Scavenging Summary Report Alert</Name>
          <Description>{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Task.Alert.Rule">
          <Name>Proactive DailyTasks DNSAlerts Scavenging Summary Report Manual Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks DNSAlerts Scavenging Summary Report Script Task Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Task.Alert.Rule">
          <Name>Proactive DNSAlerts Scavenging Close Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive DNSAlerts Scavenging Close Task Alert</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Report.Script.Task">
          <Name>Proactive DailyTasks DNSAlerts AutoClose Report Script Task</Name>
          <Description>Proactive DailyTasks DNSAlerts AutoClose task to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.SummaryReport.Script.Task">
          <Name>Proactive DailyTasks DNSAlerts Summary Report Script Task</Name>
          <Description>Proactive DailyTasks DNSAlerts SummaryReport task to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Synthetic.Script.Task">
          <Name>Proactive DailyTasks DNSAlerts Synthetic Script Test Task</Name>
          <Description>Proactive DailyTasks DNSAlerts Synthetic Script Test to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.SummaryReport.Script.Task">
          <Name>Proactive DailyTasks DNSAlerts Scavenging Summary report Task</Name>
          <Description>Proactive DailyTasks DNSAlerts Synthetic Script Test to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.DNSAlerts.Scavenging.Close.Script.Task">
          <Name>Proactive DailyTasks DNSAlerts Scavenging Close Task</Name>
          <Description>Proactive DailyTasks DNSAlerts Close alerts on-demand</Description>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.404.SocketFailure.Monitor">
          <Name>Windows DNS ADI 404 SocketFailure monitor addendum alert</Name>
          <Description>Windows DNS ADI 404 SocketFailure monitor to include samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.404.SocketFailure.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.404.SocketFailure.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.404.SocketFailure.Monitor.AlertMessage">
          <Name>Windows DNS ADI 404 SocketFailure monitor addendum alert</Name>
          <Description>Windows DNS ADI 404 SocketFailure monitor 5 alerts in 10 minutes
Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.408.OpenSocket.Monitor">
          <Name>Windows DNS ADI 408 OpenSocket monitor addendum alert</Name>
          <Description>Windows DNS ADI 408 OpenSocket monitor to include samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.408.OpenSocket.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.408.OpenSocket.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.408.OpenSocket.Monitor.AlertMessage">
          <Name>Windows DNS ADI 408 OpenSocket monitor addendum alert</Name>
          <Description>Windows DNS ADI 408 OpenSocket monitor 5 alerts in 10 minutes
Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.3152.FileError.Monitor">
          <Name>Windows DNS ADI 3152 FileError monitor addendum alert</Name>
          <Description>Windows DNS ADI 3152 FileError monitor to include samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.3152.FileError.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.3152.FileError.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.3152.FileError.Monitor.AlertMessage">
          <Name>Windows DNS ADI 3152 FileError monitor addendum alert</Name>
          <Description>Windows DNS ADI 3152 FileError monitor 2 alerts in 10 minutes
Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4000.OpenFailed.Monitor">
          <Name>Windows DNS ADI 4000 OpenFailed monitor addendum alert</Name>
          <Description>Windows DNS ADI 4000 OpenFailed monitor to include samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4000.OpenFailed.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4000.OpenFailed.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4000.OpenFailed.Monitor.AlertMessage">
          <Name>Windows DNS ADI 4000 OpenFailed monitor addendum alert</Name>
          <Description>Windows DNS ADI 4000 OpenFailed monitor 5 alerts in 10 minutes
Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4011.IntegratedWriteFailed.Monitor">
          <Name>Windows DNS ADI 4011 IntegratedWriteFailed monitor addendum alert</Name>
          <Description>Windows DNS ADI 4011 IntegratedWriteFailed monitor to include samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4011.IntegratedWriteFailed.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4011.IntegratedWriteFailed.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4011.IntegratedWriteFailed.Monitor.AlertMessage">
          <Name>Windows DNS ADI 4011 IntegratedWriteFailed monitor addendum alert</Name>
          <Description>Windows DNS ADI 4011 IntegratedWriteFailed monitor 10 alerts in 10 minutes
Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor">
          <Name>Windows DNS ADI 4015 interface monitor addendum alert</Name>
          <Description>Windows DNS ADI 4015 interface monitor alert recreated to leverage samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.AlertMessage">
          <Name>Windows DNS ADI 4015 interface monitor addendum alert</Name>
          <Description>Windows DNS ADI 4015 interface monitor alert recreated to leverage samples/count

15 events in 10 minutes

Event Description: 
$Data/Context/Context/DataItem/EventDescription$</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4016.LDAPTimeout.Monitor">
          <Name>Windows DNS ADI LDAPTimeout monitor addendum alert</Name>
          <Description>Windows DNS ADI LDAPTimeout monitor to include samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4016.LDAPTimeout.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4016.LDAPTimeout.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4016.LDAPTimeout.Monitor.AlertMessage">
          <Name>Windows DNS ADI 4016 LDAPTimeout monitor addendum alert</Name>
          <Description>Windows DNS ADI 4016 LDAPTimeout monitor 5 alerts in 10 minutes
Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4019.LoadFailed.Monitor">
          <Name>Windows DNS ADI 4019 LoadFailed monitor addendum alert</Name>
          <Description>Windows DNS ADI 4019 LoadFiled monitor to include samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4019.LoadFailed.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4019.LoadFailed.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4019.LoadFailed.Monitor.AlertMessage">
          <Name>Windows DNS ADI 4019 Load failed monitor addendum alert</Name>
          <Description>Windows DNS ADI interface monitor 5 alerts in 10 minutes
Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4521.OperationsFailed.Monitor">
          <Name>Windows DNS ADI 4521 Operations Failed monitor addendum alert</Name>
          <Description>Windows DNS ADI 4521 Operations Failed monitor to include samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4521.OperationsFailed.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4521.OperationsFailed.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.4521.OperationsFailed.Monitor.AlertMessage">
          <Name>Windows DNS ADI 4521 Operations Failed monitor addendum alert</Name>
          <Description>Windows DNS ADI 4521 Operations Failed monitor 5 alerts in 10 minutes
Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.7616.TrustAnchorsFailed.Monitor">
          <Name>Windows DNS ADI 7616 TrustAnchors Failed monitor addendum alert</Name>
          <Description>Windows DNS ADI 7616 TrustAnchors Failed monitor to include samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.7616.TrustAnchorsFailed.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.7616.TrustAnchorsFailed.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.7616.TrustAnchorsFailed.Monitor.AlertMessage">
          <Name>Windows DNS ADI 7616 TrustAnchors Failed monitor addendum alert</Name>
          <Description>Windows DNS ADI 7616 TrustAnchors Failed monitor 2 alerts in 10 minutes
Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Synthetic.Monitor">
          <Name>Proactive DNS Alerts Synthetic Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Synthetic.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Synthetic.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DNSAlerts.Synthetic.Monitor.AlertMessage">
          <Name>Proactive DNS Alerts Synthetic Monitor</Name>
          <Description>Proactive DNS Alerts Synthetic Monitor
		  {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.Event.2502.ScavengingFailed.Monitor">
          <Name>Proactive DNSAlerts Scavenging Event 2502 Scavenging Failed monitor addendum alert</Name>
          <Description>Proactive DNSAlerts Scavenging Event 2502 Scavenging Failed monitor to include samples/count</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.Event.2502.ScavengingFailed.Monitor" SubElementID="TimerEventRaised">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.Event.2502.ScavengingFailed.Monitor" SubElementID="RepeatedEventRaised">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.Event.2502.ScavengingFailed.Monitor.AlertMessage">
          <Name>Proactive DNSAlerts Scavenging Event 2502 Scavenging Failed monitor addendum alert</Name>
          <Description>Proactive DNSAlerts Scavenging Event 2502 Scavenging Failed monitor alert 2 alerts in 15 minutes
Event Description:
{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Monitor.Recovery">
          <Name>Proactive Microsoft Windows DNS Server 2016 ADI Interface Error Monitor Recovery</Name>
          <Description>Restarts DNS service when repeated errors occur.</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.Service.Recovery">
          <Name>Proactive Microsoft Windows DNS Server 2016 DNS Service Monitor Recovery</Name>
          <Description>Restarts DNS service when service NOT running</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DNSServer.2016.DNS.WMIValidation.Recovery">
          <Name>Proactive Microsoft Windows DNS Server 2016 WMI Validation recovery to check Internal/External DNS lookups functioning to reset unhealthy monitors</Name>
          <Description>Recovery script validates Internal/External DNS lookups functioning for auto-reset unhealthy monitors WMI validation monitors</Description>
        </DisplayString>

        <DisplayString ElementID="Override.Critical.Microsoft.Windows.DNSServer.2016.Monitor.DetectQueryOverload.Monitor">
          <Name>NotUsed</Name>
          <Description>Created 14 Oct 2020 - DNS Query overload increase to 200k,180k on 16 Mar, 130k critical, 65k warning.  30 Oct updated critical to 190k</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Severity.Microsoft.Windows.DNSServer.2016.ADI.BackgroundLoadFailure.Rule">
          <Name>NotUsed</Name>
          <Description>8 Feb 2021 - Severity = Warning</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Warning.Microsoft.Windows.DNSServer.2016.Monitor.DetectQueryOverload.Monitor">
          <Name>NotUsed</Name>
          <Description>Created 14 Oct 2020 - DNS Query overload increase to 200k,180k on 16 Mar, 130k critical, 65k warning.  30 Oct updated critical to 190k</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Critical.Microsoft.Windows.DNSServer.2016.Monitor.DetectServerQueryOverload.Monitor">
          <Name>NotUsed</Name>
          <Description>20 Jan 2023 - Updated Warning to 250k, Critical to 275k
21 Dec 2022 - Updated Warning to 190k, Critical to 210k
30 Oct 2020 - Updated critical to 190k
14 Oct 2020 - Updated DNS Query overload increase to 200k,180k 
16 Mar 2020 - Created override 130k critical, 65k warning.</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Warning.Microsoft.Windows.DNSServer.2016.Monitor.DetectServerQueryOverload.Monitor">
          <Name>NotUsed</Name>
          <Description>20 Jan 2023 - Updated Warning to 250k, Critical to 275k
21 Dec 2022 - Updated Warning to 190k, Critical to 210k
30 Oct 2020 - Updated critical to 190k
14 Oct 2020 - Updated DNS Query overload increase to 200k,180k 
16 Mar 2020 - Created override 130k critical, 65k warning.</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Monitor.DetectUnusedZone">
          <Name>NotUsed</Name>
          <Description>12 Jan 2022 - Disabling due to customer design</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Server.Property.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Server.Property.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.TrustPoint.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.TrustPoint.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.ClientSubnet.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.ClientSubnet.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.RecursionScope.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.RecursionScope.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Policy.ServerLevel.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Policy.ServerLevel.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.ZoneScope.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.ZoneScope.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.0to10PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.0to10PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.70to80PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.70to80PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.20to30PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.20to30PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.30to40PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.30to40PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.50to60PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.50to60PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.DNSDomain.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.DNSDomain.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.60to70PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.60to70PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.80to90PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.80to90PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.90to100PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.90to100PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.40to50PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.40to50PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.10to20PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.10to20PercentDiscovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.WINS.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.WINS.Discovery">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Forward.NSLookup">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Zone.NSLookup">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Zone.NSLookup">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Forward.NSLookup">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.IPAddress.NSLookup">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Group.Microsoft.Windows.DNSServer.2016.IPAddress.NSLookup">
          <Name>NotUsed</Name>
          <Description>3 Mar 2022 - Disabling DNS synthetics from 54</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.Forwarder.Conditional.Discovery">
          <Name>NotUsed</Name>
          <Description>10 Nov 2022 - Enabling Group for Override</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Severity.Microsoft.Windows.DNSServer.2016.ADI.OpenFailed">
          <Name>NotUsed</Name>
          <Description>5 Jan 2023 - Changed Severity to warning</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Severity.Microsoft.Windows.DNSServer.2016.ADI.WriteFailed">
          <Name>NotUsed</Name>
          <Description>5 Jan 2023 - Changed Severity to warning</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Severity.Microsoft.Windows.DNSServer.2016.ADI.LDAPTimeout">
          <Name>NotUsed</Name>
          <Description>5 Jan 2023 - Changed Severity to warning</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Severity.Microsoft.Windows.DNSServer.2016.Server.LoggingLevel">
          <Name>NotUsed</Name>
          <Description>23 Jan 2023 - Disabled with counting monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.ZoneConflict.Rule">
          <Name>NotUsed</Name>
          <Description>13 Jun 2023 - Disabled with counting monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.ZoneOperationFailed.Rule">
          <Name>NotUsed</Name>
          <Description>13 Jun 2023 - Disabled with counting monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.RecordLoadFailed.Rule">
          <Name>NotUsed</Name>
          <Description>13 Jun 2023 - Disabled with counting monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.OpenFailed.Rule">
          <Name>NotUsed</Name>
          <Description>13 Jun 2023 - Disabled with counting monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Enable.Microsoft.Windows.DNSServer.2016.ADI.InterfaceError.Rule">
          <Name>NotUsed</Name>
          <Description>1 Mar 2021 - Disabled for Addendum pack</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.DNSServer.2016.Collection.Warning">
          <Name>NotUsed</Name>
          <Description>9 Mar 2022 - Disabling Windows DNS event rule</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Windows.Server.2016.AD.DNSServer.Warning.EventCollection">
          <Name>NotUsed</Name>
          <Description>9 Mar 2022 - Disabling Windows DNS event rule</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.LDAPTimeout">
          <Name>NotUsed</Name>
          <Description>23 Jan 2023 - Disabled with counting monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.BackgroundLoadFailure">
          <Name>NotUsed</Name>
          <Description>23 Jan 2023 - Disabled with counting monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.RetryableZoneOperationFailed">
          <Name>NotUsed</Name>
          <Description>23 Jan 2023 - Disabled with counting monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Severity.Microsoft.Windows.DNSServer.2016.WMI.Validation.TestOne">
          <Name>NotUsed</Name>
          <Description>2 Feb 2023 - changing first attempt to warning</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.Configuration.OpenSocketForAddress.Rule">
          <Name>NotUsed</Name>
          <Description>24 Feb 2023 - Disabling duplicate rule as repeat count addendum monitor exists</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.Service.SocketFailure.Rule">
          <Name>NotUsed</Name>
          <Description>24 Feb 2023 - Disabling duplicate rule as repeat count addendum monitor exists</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.WriteFailed.Rule">
          <Name>NotUsed</Name>
          <Description>13 June 2023 - Disabled due to added count logic monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.Rules.DNSSEC.TALoadFailed">
          <Name>NotUsed</Name>
          <Description>27 June 2023 - Disabled due to added count logic monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.Service.FileError">
          <Name>NotUsed</Name>
          <Description>27 June 2023 - Disabled due to added count logic monitor</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.ADI.SecurityInterfaceFailed">
          <Name>NotUsed</Name>
          <Description>17 Jan 2025 - Disabled per domain admin with other health monitors.  DNS restarts last after reboot.</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Disable.Microsoft.Windows.DNSServer.2016.RPC.Initialize.Failed">
          <Name>NotUsed</Name>
          <Description>17 Jan 2025 - Disabled per domain admin with other health monitors.  DNS restarts last after reboot.</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>